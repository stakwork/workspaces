apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-pool-ui-config
  namespace: workspace-system
data:
  config.json: |
    {
      "vmManagement": {
        "enabled": true,
        "refreshInterval": 30,
        "actions": {
          "markAsUsed": true,
          "markAsUnused": true
        }
      },
      "poolListView": {
        "showAvailableVMs": true,
        "columns": [
          "name",
          "totalVMs",
          "availableVMs",
          "status",
          "actions"
        ]
      },
      "vmModal": {
        "enabled": true,
        "refreshInterval": 15,
        "columns": [
          "name",
          "status",
          "lastUsed",
          "actions"
        ]
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-pool-ui-nginx-config
  namespace: workspace-system
data:
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Support for SPA routing
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy API requests
        location /api/ {
            proxy_pass http://workspace-controller:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
            
            # Handle OPTIONS requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # Serve configuration file
        location /config.json {
            alias /etc/nginx/pool-ui/config.json;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-pool-ui-static
  namespace: workspace-system
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Pool Manager</title>
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
      </head>
      <body class="bg-gray-100 font-sans">
        <div class="container mx-auto p-4">
          <!-- Header -->
          <div class="flex justify-between items-center mb-6">
            <div class="flex items-center space-x-6">
              <h1 class="text-3xl font-bold">Pool Manager</h1>
              <a href="/" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md text-sm transition duration-200">
                Back to Dashboard
              </a>
            </div>
            <div class="flex items-center space-x-4">
              <select id="poolSelect" class="rounded-md border border-gray-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"></select>
              <button id="refreshPools" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition duration-200">
                Refresh Pools
              </button>
            </div>
          </div>
          <!-- Pool Content -->
          <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold mb-4">VMs in Pool: <span id="currentPool" class="text-blue-600">-</span></h2>
            <!-- Pool Stats -->
            <div class="grid grid-cols-3 gap-4 mb-6">
              <div class="bg-blue-50 p-4 rounded-lg">
                <h3 class="text-sm font-semibold text-gray-600">Total VMs</h3>
                <p id="totalVMs" class="text-2xl font-bold text-blue-600">-</p>
              </div>
              <div class="bg-green-50 p-4 rounded-lg">
                <h3 class="text-sm font-semibold text-gray-600">Available VMs</h3>
                <p id="availableVMs" class="text-2xl font-bold text-green-600">-</p>
              </div>
              <div class="bg-yellow-50 p-4 rounded-lg">
                <h3 class="text-sm font-semibold text-gray-600">In Use</h3>
                <p id="inUseVMs" class="text-2xl font-bold text-yellow-600">-</p>
              </div>
            </div>
            <div class="overflow-x-auto">
              <table id="vmsTable" class="min-w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">VM ID</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ready Replicas</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Access URL</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Used</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200"></tbody>
              </table>
            </div>
          </div>
        </div>
        <script>
          // Add Auth with getAuthHeaders functionality
          class Auth {
              static getToken() {
                  return localStorage.getItem('workspace_auth_token');
              }
              static getAuthHeaders() {
                  const token = this.getToken();
                  return token ? { 'Authorization': `Bearer ${token}` } : {};
              }
          }
          
          // Updated authenticatedFetch function with token header and no cookies
          async function authenticatedFetch(url, options = {}) {
              const authHeaders = Auth.getAuthHeaders();
              const config = {
                  ...options,
                  headers: {
                      ...authHeaders,
                      ...options.headers,
                      'Content-Type': 'application/json'
                  },
                  credentials: 'omit'
              };
              const response = await fetch(url, config);
              if (response.status === 401 || response.status === 403) {
                  alert("Your session has expired. Please log in from Workspace Manager.");
                  throw new Error('Authentication required');
              }
              return response;
          }
          
          async function fetchPools() {
            try {
              const res = await authenticatedFetch('/api/pools');
              if (!res.ok) throw new Error('Failed to fetch pools');
              const data = await res.json();
              const poolSelect = document.getElementById('poolSelect');
              poolSelect.innerHTML = '';
              data.pools.forEach(pool => {
                const option = document.createElement('option');
                option.value = pool.name;
                option.textContent = pool.name;
                poolSelect.appendChild(option);
              });
              if (poolSelect.options.length > 0) {
                poolSelect.selectedIndex = 0;
                loadAvailableVMs(poolSelect.value); // start polling as needed
              }
            } catch (err) {
              alert(err.message);
            }
          }
          
          async function loadAvailableVMs(poolName) {
            const currentPoolSpan = document.getElementById('currentPool');
            const vmsTableBody = document.querySelector('#vmsTable tbody');
            currentPoolSpan.textContent = poolName;
            vmsTableBody.innerHTML = '<tr><td colspan="6" class="px-6 py-4 text-center">Loading...</td></tr>';
            try {
              const res = await authenticatedFetch(`/api/pools/${encodeURIComponent(poolName)}/workspaces`);
              if (!res.ok) throw new Error(`Failed to fetch pool VMs: ${res.status} ${res.statusText}`);
              const data = await res.json();
              if (!data || !Array.isArray(data.workspaces)) throw new Error('Invalid response format');
              // Update stats (for brevity we assume stats update code here)
              // ...existing code to update pool metrics and table rows...
            } catch (error) {
              vmsTableBody.innerHTML = `<tr><td colspan="6" class="px-6 py-4 text-center text-red-500">Error: ${error.message}</td></tr>`;
            }
          }
          
          document.addEventListener('DOMContentLoaded', function() {
            // Check for auth token, redirect if missing
            if (!Auth.getToken()) {
              window.location.href = '/login';
              return;
            }
            fetchPools();
            document.getElementById('refreshPools').addEventListener('click', fetchPools);
            // Additional initialization and auto-refresh/polling logic can be added here.
          });
        </script>
      </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workspace-pool-ui
  namespace: workspace-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: workspace-pool-ui
  template:
    metadata:
      labels:
        app: workspace-pool-ui
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: pool-ui-static
          mountPath: /usr/share/nginx/html
        - name: pool-ui-config
          mountPath: /etc/nginx/pool-ui
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 15
          periodSeconds: 20
      volumes:
      - name: pool-ui-static
        configMap:
          name: workspace-pool-ui-static
          items:
          - key: index.html
            path: index.html
      - name: pool-ui-config
        configMap:
          name: workspace-pool-ui-config
      - name: nginx-config
        configMap:
          name: workspace-pool-ui-nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: workspace-pool-ui
  namespace: workspace-system
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: workspace-pool-ui
