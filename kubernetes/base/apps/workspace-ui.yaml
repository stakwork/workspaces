apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-ui
  namespace: workspace-system
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Pod Manager</title>
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    </head>
    <body class="bg-gray-100 font-sans">
        <!-- Login Modal -->
        <div id="loginModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-bold text-gray-900 mb-4">Login to Pod Manager</h3>
                    <form id="loginForm">
                        <div class="mb-4">
                            <label for="username" class="block text-gray-700 text-sm font-bold mb-2">Username:</label>
                            <input type="text" id="username" name="username" required
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        </div>
                        <div class="mb-6">
                            <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password:</label>
                            <input type="password" id="password" name="password" required
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        </div>
                        <div id="loginError" class="mb-4 text-red-500 text-sm hidden"></div>
                        <div class="flex items-center justify-between">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                Sign In
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div id="mainContent" class="container mx-auto p-4 hidden">
            <!-- Header with Logout -->
            <div class="flex justify-between items-center mb-6">
                <h1 class="text-3xl font-bold">Pod Manager</h1>
                <div class="flex items-center space-x-4">
                    <span id="userInfo" class="text-gray-600"></span>
                    <button id="logoutBtn" class="bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-600">
                        Logout
                    </button>
                </div>
            </div>
            
            <!-- Navigation Tabs -->
            <div class="mb-6">
                <nav class="flex space-x-8" aria-label="Tabs">
                    <button id="workspacesTab" class="tab-button bg-blue-500 text-white py-2 px-4 rounded-md">
                        Individual Pods
                    </button>
                    <button id="poolsTab" class="tab-button bg-gray-200 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-300">
                        Pod Pools
                    </button>
                </nav>
            </div>

            <!-- Workspaces Content -->
            <div id="workspacesContent">
                <!-- Create Workspace Form -->
                <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                    <h2 class="text-xl font-semibold mb-4">Create New Pod</h2>
                    <form id="createWorkspaceForm">
                        <!-- Repository Inputs -->
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-3">Repositories</h3>
                            <div id="repoInputs" class="space-y-3 mb-4">
                                <div class="repo-input">
                                    <div class="w-full">
                                        <label for="githubUrl0" class="block text-gray-700 mb-2">GitHub Repository URL</label>
                                        <input type="text" id="githubUrl0" 
                                            placeholder="https://github.com/username/repository" 
                                            class="w-full p-2 border border-gray-300 rounded-md mb-2">
                                        <label for="githubBranch0" class="block text-gray-700 mb-2">Branch (optional)</label>
                                        <input type="text" id="githubBranch0" 
                                            placeholder="main (leave empty for default branch)" 
                                            class="w-full p-2 border border-gray-300 rounded-md">
                                        <p class="text-xs text-gray-500 mt-1">If not specified, the repository's default branch will be used</p>
                                    </div>
                                </div>
                            </div>
                            <div class="flex space-x-2 mb-4">
                                <button type="button" id="addRepoBtn" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-300">
                                    + Add Repository
                                </button>
                            </div>
                        </div>

                        <!-- GitHub Username Input -->
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-3">GitHub Username (Optional)</h3>
                            <input type="text" id="githubUsername" 
                                placeholder="your-github-username" 
                                class="w-full p-2 border border-gray-300 rounded-md">
                            <p class="text-xs text-gray-500 mt-1">
                                GitHub username associated with the Personal Access Token above.
                            </p>
                        </div>
                        
                        <!-- GitHub PAT Input -->
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-3">GitHub Access Token (Optional)</h3>
                            <input type="password" id="githubPat" 
                                placeholder="Personal Access Token for private repos" 
                                class="w-full p-2 border border-gray-300 rounded-md">
                            <p class="text-xs text-gray-500 mt-1">
                                If you want to clone private repositories, enter a GitHub Personal Access Token (PAT) here.<br>
                                <span class="text-red-500">Do not reuse tokens you use elsewhere. Create a new token with only <b>repo</b> access.</span>
                            </p>
                        </div>
                        
                        <!-- Custom Image Settings -->
                        <div class="mb-6">
                            <h3 class="text-lg font-medium mb-3">Image Configuration</h3>
                            
                            <div class="mb-4">
                                <label class="inline-flex items-center">
                                    <input type="radio" name="imageConfigType" value="default" checked class="form-radio">
                                    <span class="ml-2">Use Default Image (linuxserver/code-server:latest)</span>
                                </label>
                            </div>
                            
                            <div class="mb-4">
                                <label class="inline-flex items-center">
                                    <input type="radio" name="imageConfigType" value="custom" class="form-radio">
                                    <span class="ml-2">Use Custom Image</span>
                                </label>
                                
                                <div id="customImageOptions" class="mt-3 ml-6 hidden">
                                    <div class="mb-3">
                                        <label class="inline-flex items-center">
                                            <input type="radio" name="customImageType" value="dockerImage" checked class="form-radio">
                                            <span class="ml-2">Specify Docker Image</span>
                                        </label>
                                        <div class="mt-2">
                                            <input type="text" id="customImageName" 
                                                placeholder="e.g., myorg/code-server:v2" 
                                                class="w-full p-2 border border-gray-300 rounded-md">
                                            <p class="text-xs text-gray-500 mt-1">Must be compatible with linuxserver/code-server base image</p>
                                        </div>
                                    </div>
                                    
                                    <div>
                                        <label class="inline-flex items-center">
                                            <input type="radio" name="customImageType" value="imageUrl" class="form-radio">
                                            <span class="ml-2">Build from URL</span>
                                        </label>
                                        <div class="mt-2">
                                            <input type="text" id="customImageUrl" 
                                                placeholder="https://github.com/myorg/my-custom-image" 
                                                class="w-full p-2 border border-gray-300 rounded-md" disabled>
                                            <p class="text-xs text-gray-500 mt-1">URL to GitHub repository or ZIP file containing Dockerfile</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600">
                            Create Pod
                        </button>
                    </form>
                    <div id="createStatus" class="mt-4 hidden"></div>
                </div>
                
                <!-- Workspaces List -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4">Your Pods</h2>
                    <div id="workspacesList" class="space-y-4">
                        <p class="text-gray-500">Loading Pods...</p>
                    </div>
                </div>
            </div>

            <!-- Pools Content -->
            <div id="poolsContent" class="hidden">
                <!-- Create Pool Form -->
                <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                    <h2 class="text-xl font-semibold mb-4">Create New Pool</h2>
                    <form id="createPoolForm">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="poolName" class="block text-gray-700 mb-2">Pool Name</label>
                                <input type="text" id="poolName" 
                                    placeholder="e.g., frontend-dev-pool" 
                                    class="w-full p-2 border border-gray-300 rounded-md" required>
                                <p class="text-xs text-gray-500 mt-1">Unique identifier for this pool</p>
                            </div>
                            
                            <div>
                                <label for="minimumVms" class="block text-gray-700 mb-2">Minimum VMs</label>
                                <input type="number" id="minimumVms" min="1" value="3"
                                    class="w-full p-2 border border-gray-300 rounded-md" required>
                                <p class="text-xs text-gray-500 mt-1">Minimum number of running pods</p>
                            </div>
                            
                            <div>
                                <label for="poolRepoName" class="block text-gray-700 mb-2">Repository URL</label>
                                <input type="text" id="poolRepoName" 
                                    placeholder="e.g., https://github.com/myorg/my-repo" 
                                    class="w-full p-2 border border-gray-300 rounded-md" required>
                                <p class="text-xs text-gray-500 mt-1">GitHub repository (URL)</p>
                            </div>
                            
                            <div>
                                <label for="poolBranchName" class="block text-gray-700 mb-2">Branch Name</label>
                                <input type="text" id="poolBranchName" 
                                    placeholder="master" value="master"
                                    class="w-full p-2 border border-gray-300 rounded-md" required>
                                <p class="text-xs text-gray-500 mt-1">Git branch to clone</p>
                            </div>
                        </div>

                        <div class="mt-6">
                            <label for="poolGithubUsername" class="block text-gray-700 mb-2">GitHub Username</label>
                            <input type="text" id="poolGithubUsername" 
                                placeholder="your-github-username" 
                                class="w-full p-2 border border-gray-300 rounded-md">
                            <p class="text-xs text-gray-500 mt-1">
                                GitHub username associated with the Personal Access Token above.
                            </p>
                        </div>
                        
                        <div class="mt-6">
                            <label for="poolGithubPat" class="block text-gray-700 mb-2">GitHub Personal Access Token</label>
                            <input type="password" id="poolGithubPat" 
                                placeholder="ghp_xxxxxxxxxxxxxxxx" 
                                class="w-full p-2 border border-gray-300 rounded-md">
                            <p class="text-xs text-gray-500 mt-1">
                                <span class="text-red-500">Required for private pool creation.</span> 
                                Create a token with <b>repo</b> access for private repositories.
                            </p>
                        </div>
                        
                        <div class="mt-6">
                            <button type="submit" class="bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600">
                                Create Pool
                            </button>
                        </div>
                    </form>
                    <div id="createPoolStatus" class="mt-4 hidden"></div>
                </div>
                
                <!-- Pools List -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h2 class="text-xl font-semibold mb-4">Pod Pools</h2>
                    <div id="poolsList" class="space-y-4">
                        <p class="text-gray-500">Loading pools...</p>
                    </div>
                </div>
            </div>
        </div>
        
        <script>
        const API_BASE_URL = '/api';
        let repoCounter = 1;
        let authToken = null;
        let currentUser = null;
        let currentTab = 'workspaces';

        function encodePoolName(poolName) {
            return encodeURIComponent(poolName);
        }

        // Authentication utilities
        class Auth {
            static getToken() {
                return localStorage.getItem('workspace_auth_token');
            }
            
            static setToken(token) {
                localStorage.setItem('workspace_auth_token', token);
                authToken = token;
            }
            
            static removeToken() {
                localStorage.removeItem('workspace_auth_token');
                localStorage.removeItem('workspace_user_info');
                authToken = null;
                currentUser = null;
            }
            
            static getUserInfo() {
                const userInfo = localStorage.getItem('workspace_user_info');
                return userInfo ? JSON.parse(userInfo) : null;
            }
            
            static setUserInfo(userInfo) {
                localStorage.setItem('workspace_user_info', JSON.stringify(userInfo));
                currentUser = userInfo;
            }
            
            static isAuthenticated() {
                const token = this.getToken();
                if (!token) return false;
                
                try {
                    // Simple JWT expiration check
                    const payload = JSON.parse(atob(token.split('.')[1]));
                    return payload.exp * 1000 > Date.now();
                } catch (e) {
                    return false;
                }
            }
            
            static getAuthHeaders() {
                const token = this.getToken();
                return token ? { 'Authorization': `Bearer ${token}` } : {};
            }
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        function initializeApp() {
            authToken = Auth.getToken();
            currentUser = Auth.getUserInfo();
            
            if (Auth.isAuthenticated()) {
                showMainContent();
                setupTabListeners();
                setupFormListeners();
                loadWorkspaces();
            } else {
                showLoginModal();
            }
            
            setupAuthListeners();
        }

        function setupAuthListeners() {
            // Login form
            document.getElementById('loginForm').addEventListener('submit', handleLogin);
            
            // Logout button
            document.getElementById('logoutBtn').addEventListener('click', handleLogout);
        }

        function setupTabListeners() {
            document.getElementById('workspacesTab').addEventListener('click', () => switchTab('workspaces'));
            document.getElementById('poolsTab').addEventListener('click', () => switchTab('pools'));
        }

        function switchTab(tab) {
            currentTab = tab;
            
            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.className = 'tab-button bg-gray-200 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-300';
            });
            
            if (tab === 'workspaces') {
                document.getElementById('workspacesTab').className = 'tab-button bg-blue-500 text-white py-2 px-4 rounded-md';
                document.getElementById('workspacesContent').classList.remove('hidden');
                document.getElementById('poolsContent').classList.add('hidden');
                loadWorkspaces();
            } else {
                document.getElementById('poolsTab').className = 'tab-button bg-green-500 text-white py-2 px-4 rounded-md';
                document.getElementById('workspacesContent').classList.add('hidden');
                document.getElementById('poolsContent').classList.remove('hidden');
                loadPools();
            }
        }

        function showLoginModal() {
            document.getElementById('loginModal').classList.remove('hidden');
            document.getElementById('mainContent').classList.add('hidden');
        }

        function showMainContent() {
            document.getElementById('loginModal').classList.add('hidden');
            document.getElementById('mainContent').classList.remove('hidden');
            
            if (currentUser) {
                document.getElementById('userInfo').textContent = `Welcome, ${currentUser.username}`;
            }
        }

        async function handleLogin(e) {
            e.preventDefault();
            
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const loginError = document.getElementById('loginError');
            
            try {
                const response = await fetch(`${API_BASE_URL}/auth/login`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ username, password })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    Auth.setToken(data.token);
                    Auth.setUserInfo(data.user);
                    currentUser = data.user;
                    
                    showMainContent();
                    setupTabListeners();
                    setupFormListeners();
                    loadWorkspaces();
                    
                    // Clear form
                    document.getElementById('loginForm').reset();
                    loginError.classList.add('hidden');
                } else {
                    loginError.textContent = data.error || 'Login failed';
                    loginError.classList.remove('hidden');
                }
            } catch (error) {
                console.error('Login error:', error);
                loginError.textContent = 'Login failed. Please try again.';
                loginError.classList.remove('hidden');
            }
        }

        function handleLogout() {
            if (confirm('Are you sure you want to logout?')) {
                Auth.removeToken();
                showLoginModal();
            }
        }

        // Modified fetch function to include auth headers
        async function authenticatedFetch(url, options = {}) {
            const authHeaders = Auth.getAuthHeaders();
            
            const config = {
                ...options,
                headers: {
                    ...authHeaders,
                    ...options.headers
                }
            };
            
            const response = await fetch(url, config);
            
            // Handle 401 Unauthorized
            if (response.status === 401) {
                Auth.removeToken();
                showLoginModal();
                throw new Error('Authentication required');
            }
            
            return response;
        }

        // Setup form listeners
        function setupFormListeners() {
            // Add repository button
            document.getElementById('addRepoBtn').addEventListener('click', addRepositoryInput);
            
            // Image config type radio buttons
            const imageConfigRadios = document.querySelectorAll('input[name="imageConfigType"]');
            imageConfigRadios.forEach(radio => {
                radio.addEventListener('change', toggleCustomImageOptions);
            });
            
            // Custom image type radio buttons
            const customImageTypeRadios = document.querySelectorAll('input[name="customImageType"]');
            customImageTypeRadios.forEach(radio => {
                radio.addEventListener('change', toggleCustomImageInputs);
            });
            
            // Form submissions
            document.getElementById('createWorkspaceForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createWorkspace();
            });
            
            document.getElementById('createPoolForm').addEventListener('submit', function(e) {
                e.preventDefault();
                createPool();
            });
        }

        // Function to mark workspace as used
        async function markWorkspaceAsUsed(poolName, workspaceId) {
            const userInfo = prompt('Enter your name or identifier (optional):');
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodePoolName(poolName)}/workspaces/${workspaceId}/mark-used`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        user_info: userInfo || currentUser?.username || 'Unknown'
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    alert(`Workspace marked as used by ${data.user_info}`);
                    loadPools(); // Refresh the pools list
                } else {
                    alert(`Error: ${data.error || 'Failed to mark Pod as used'}`);
                }
            } catch (error) {
                console.error('Error marking Pod as used:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to mark Pod as used. Please try again later.');
                }
            }
        }

        // Function to mark workspace as unused
        async function markWorkspaceAsUnused(poolName, workspaceId) {
            if (!confirm('Mark this Pod as unused?')) return;
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodePoolName(poolName)}/workspaces/${workspaceId}/mark-unused`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    alert('Pod marked as unused');
                    loadPools(); // Refresh the pools list
                } else {
                    alert(`Error: ${data.error || 'Failed to mark Pod as unused'}`);
                }
            } catch (error) {
                console.error('Error marking Pod as unused:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to mark Pod as unused. Please try again later.');
                }
            }
        }

        // Helper function to get usage status badge
        function getUsageStatusBadge(usageStatus, userInfo) {
            if (usageStatus === 'used') {
                const user = userInfo ? ` by ${userInfo}` : '';
                return `<span class="text-xs px-2 py-1 rounded-full bg-orange-100 text-orange-800">Used${user}</span>`;
            } else {
                return `<span class="text-xs px-2 py-1 rounded-full bg-green-100 text-green-800">Available</span>`;
            }
        }

        // Add a new repository input
        function addRepositoryInput() {
            const repoInputs = document.getElementById('repoInputs');
            const newInput = document.createElement('div');
            newInput.className = 'repo-input';
            newInput.innerHTML = `
                <div class="w-full border border-gray-200 rounded-md p-3 mb-3">
                    <div class="flex justify-between items-start mb-2">
                        <label for="githubUrl${repoCounter}" class="block text-gray-700 font-medium">Additional Repository URL</label>
                        <button type="button" class="remove-repo-btn bg-red-500 text-white py-1 px-3 rounded-md text-sm hover:bg-red-600">
                            Remove
                        </button>
                    </div>
                    <input type="text" id="githubUrl${repoCounter}" 
                        placeholder="https://github.com/username/repository" 
                        class="w-full p-2 border border-gray-300 rounded-md mb-2">
                    <label for="githubBranch${repoCounter}" class="block text-gray-700 mb-2">Branch (optional)</label>
                    <input type="text" id="githubBranch${repoCounter}" 
                        placeholder="main (leave empty for default branch)" 
                        class="w-full p-2 border border-gray-300 rounded-md">
                    <p class="text-xs text-gray-500 mt-1">If not specified, the repository's default branch will be used</p>
                </div>
            `;
            repoInputs.appendChild(newInput);
            
            // Add event listener to remove button
            newInput.querySelector('.remove-repo-btn').addEventListener('click', function() {
                repoInputs.removeChild(newInput);
            });
            
            repoCounter++;
        }

        // Toggle custom image options visibility
        function toggleCustomImageOptions() {
            const customImageOptions = document.getElementById('customImageOptions');
            if (document.querySelector('input[name="imageConfigType"]:checked').value === 'custom') {
                customImageOptions.classList.remove('hidden');
            } else {
                customImageOptions.classList.add('hidden');
            }
        }

        // Toggle between Docker image name and URL inputs
        function toggleCustomImageInputs() {
            const imageNameInput = document.getElementById('customImageName');
            const imageUrlInput = document.getElementById('customImageUrl');
            
            if (document.querySelector('input[name="customImageType"]:checked').value === 'dockerImage') {
                imageNameInput.disabled = false;
                imageUrlInput.disabled = true;
            } else {
                imageNameInput.disabled = true;
                imageUrlInput.disabled = false;
            }
        }

        // Function to load workspaces
        async function loadWorkspaces() {
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/workspaces`);
                const data = await response.json();
                
                const workspacesList = document.getElementById('workspacesList');
                
                if (data.workspaces && data.workspaces.length > 0) {
                    workspacesList.innerHTML = '';
                    
                    data.workspaces.forEach(workspace => {
                        const workspaceEl = document.createElement('div');
                        workspaceEl.className = 'border border-gray-200 rounded-md p-4';
                        
                        const repoName = workspace.repoName || (workspace.repositories?.[0] || workspace.repository).split('/').pop().replace('.git', '');
                        const stateBadge = getStateBadge(workspace.state || 'unknown');

                        // Create repository list HTML
                        let repoListHtml = '';
                        if (workspace.repositories && workspace.repositories.length > 0) {
                            repoListHtml = `
                                <div class="mt-2 border-t pt-2">
                                    <p class="text-sm font-medium text-gray-700">Repositories:</p>
                                    <ul class="text-sm text-gray-600 list-disc pl-5">
                            `;
                            
                            workspace.repositories.forEach((repo, index) => {
                                const repoShortName = repo.split('/').pop().replace('.git', '');
                                let branchInfo = '';
                                if (workspace.branches && workspace.branches[index]) {
                                    branchInfo = ` <span class="text-xs text-blue-600">(${workspace.branches[index]})</span>`;
                                }
                                repoListHtml += `<li>${repoShortName}${branchInfo} <span class="text-xs text-gray-500">(${repo})</span></li>`;
                            });
                            
                            repoListHtml += `
                                    </ul>
                                </div>
                            `;
                        } else if (workspace.repository) {
                            // For backward compatibility with old workspaces
                            let branchInfo = '';
                            if (workspace.branch) {
                                branchInfo = ` <span class="text-xs text-blue-600">(${workspace.branch})</span>`;
                            }
                            repoListHtml = `
                                <div class="mt-2">
                                    <p class="text-sm text-gray-600">${workspace.repository}${branchInfo}</p>
                                </div>
                            `;
                        }
                        
                        // Add image info
                        let imageInfoHtml = '';
                        if (workspace.image) {
                            imageInfoHtml = `<p class="text-xs text-gray-500 mt-1">Image: ${workspace.image}</p>`;
                        } else if (workspace.imageUrl) {
                            imageInfoHtml = `<p class="text-xs text-gray-500 mt-1">Custom Image: Built from ${workspace.imageUrl}</p>`;
                        }
                        
                        workspaceEl.innerHTML = `
                            <div class="flex justify-between items-start">
                                <div>
                                    <div class="flex items-center">
                                        <h3 class="font-semibold text-lg">${repoName}</h3>
                                        <span class="ml-2">${stateBadge}</span>
                                    </div>
                                    ${repoListHtml}
                                    <p class="mt-1 text-xs text-gray-500">ID: ${workspace.id}</p>
                                    <p class="mt-1 text-xs text-gray-500">Subdomain: ${workspace.fqdn}</p>
                                    ${imageInfoHtml}
                                    <p class="mt-2">
                                        <a href="${workspace.url}" target="_blank" class="text-blue-500 hover:underline">
                                            Open Pod
                                        </a>
                                    </p>
                                </div>
                                <div class="space-x-2">
                                    <button onclick="startWorkspace('${workspace.id}')" 
                                        class="bg-green-500 text-white py-1 px-3 rounded-md text-sm"
                                        ${workspace.state === 'running' ? 'disabled' : ''}>
                                        Start
                                    </button>
                                    <button onclick="stopWorkspace('${workspace.id}')"
                                        class="bg-yellow-500 text-white py-1 px-3 rounded-md text-sm"
                                        ${workspace.state !== 'running' ? 'disabled' : ''}>
                                        Stop
                                    </button>
                                    <button onclick="deleteWorkspace('${workspace.id}')" class="bg-red-500 text-white py-1 px-3 rounded-md text-sm">
                                        Delete
                                    </button>
                                </div>
                            </div>
                            <div class="mt-2 text-sm">
                                <span class="text-gray-600">Created: ${new Date(workspace.created).toLocaleString()}</span>
                            </div>
                        `;
                        
                        workspacesList.appendChild(workspaceEl);
                    });
                } else {
                    workspacesList.innerHTML = '<p class="text-gray-500">No Pods found. Create one to get started.</p>';
                }
            } catch (error) {
                console.error('Error loading Pods:', error);
                if (error.message !== 'Authentication required') {
                    document.getElementById('workspacesList').innerHTML = 
                        '<p class="text-red-500">Failed to load Pods. Please try again later.</p>';
                }
            }
        }

        // Function to load pools
        async function loadPools() {
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools`);
                const data = await response.json();
                
                const poolsList = document.getElementById('poolsList');
                
                if (data.pools && data.pools.length > 0) {
                    poolsList.innerHTML = '';
                    
                    data.pools.forEach(pool => {
                        const poolEl = document.createElement('div');
                        poolEl.className = 'border border-gray-200 rounded-md p-4 bg-gray-50';
                        
                        const statusColor = pool.needs_scaling ? 'text-orange-600' : 'text-green-600';
                        const statusText = pool.needs_scaling ? `Scaling needed (${pool.scale_needed} more VMs)` : 'At minimum capacity';
                        
                        poolEl.innerHTML = `
                            <div class="flex justify-between items-start">
                                <div>
                                    <div class="flex items-center">
                                        <h3 class="font-semibold text-lg">${pool.pool_name}</h3>
                                        <span class="ml-2 text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-800">Pool</span>
                                    </div>
                                    <div class="mt-2 text-sm text-gray-600">
                                        <p><strong>Repository:</strong> ${pool.repo_name || 'N/A'}</p>
                                        <p><strong>Branch:</strong> ${pool.branch_name || 'N/A'}</p>
                                        <p><strong>Minimum VMs:</strong> ${pool.minimum_vms}</p>
                                        <p><strong>Current VMs:</strong> ${pool.current_vms}</p>
                                        <p><strong>Running:</strong> ${pool.running_vms} | <strong>Pending:</strong> ${pool.pending_vms} | <strong>Failed:</strong> ${pool.failed_vms}</p>
                                        <p><strong>Used:</strong> ${pool.used_vms || 0} | <strong>Available:</strong> ${pool.unused_vms || 0}</p>
                                        <p class="${statusColor}"><strong>Status:</strong> ${statusText}</p>
                                    </div>
                                    <div class="mt-2">
                                        <button onclick="togglePoolWorkspaces('${pool.pool_name}')" class="text-blue-500 hover:underline text-sm">
                                            View Pods (${pool.current_vms})
                                        </button>
                                    </div>
                                </div>
                                <div class="space-x-2">
                                    <button onclick="getAvailableWorkspace('${pool.pool_name}')" 
                                        class="bg-blue-500 text-white py-1 px-3 rounded-md text-sm"
                                        ${(pool.unused_vms || 0) === 0 ? 'disabled' : ''}>
                                        Get Available (${pool.unused_vms || 0})
                                    </button>
                                    <button onclick="scalePool('${pool.pool_name}')" class="bg-yellow-500 text-white py-1 px-3 rounded-md text-sm">
                                        Scale
                                    </button>
                                    <button onclick="deletePool('${pool.pool_name}')" class="bg-red-500 text-white py-1 px-3 rounded-md text-sm">
                                        Delete
                                    </button>
                                </div>
                            </div>
                            <div class="mt-2 text-sm">
                                <span class="text-gray-600">Last Check: ${new Date(pool.last_check).toLocaleString()}</span>
                            </div>
                            <div id="pool-workspaces-${pool.pool_name.replace(/[^a-zA-Z0-9]/g, '-')}" class="hidden mt-4 border-t pt-4">
                                <!-- Workspaces will be loaded here -->
                            </div>
                        `;
                        
                        poolsList.appendChild(poolEl);
                    });
                } else {
                    poolsList.innerHTML = '<p class="text-gray-500">No pools found. Create one to get started.</p>';
                }
            } catch (error) {
                console.error('Error loading pools:', error);
                if (error.message !== 'Authentication required') {
                    document.getElementById('poolsList').innerHTML = 
                        '<p class="text-red-500">Failed to load pools. Please try again later.</p>';
                }
            }
        }

        // Function to create a pool
        async function createPool() {
            const poolName = document.getElementById('poolName').value.trim();
            const minimumVms = parseInt(document.getElementById('minimumVms').value);
            const repoName = document.getElementById('poolRepoName').value.trim();
            const branchName = document.getElementById('poolBranchName').value.trim();
            const githubPat = document.getElementById('poolGithubPat').value.trim();
            const githubUsername = document.getElementById('poolGithubUsername').value.trim();
            
            if (!poolName || !repoName || !branchName) {
                alert('Please fill in all required fields');
                return;
            }

            if (poolName.includes('/') || poolName.includes(' ') || /[^a-zA-Z0-9_.-]/.test(poolName)) {
                alert('Pool name should not contain special characters.')
                return;
            }
            
            const statusEl = document.getElementById('createPoolStatus');
            statusEl.className = 'mt-4 p-4 bg-yellow-100 text-yellow-800 rounded-md';
            statusEl.innerHTML = 'Creating pool... This will start creating the minimum VMs.';
            statusEl.classList.remove('hidden');
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        pool_name: poolName,
                        minimum_vms: minimumVms,
                        repo_name: repoName,
                        branch_name: branchName,
                        github_pat: githubPat,
                        github_username: githubUsername
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    statusEl.className = 'mt-4 p-4 bg-green-100 text-green-800 rounded-md';
                    statusEl.innerHTML = `
                        <p class="font-semibold">Pool created successfully!</p>
                        <p>Pool Name: ${poolName}</p>
                        <p>Repository: ${repoName} (${branchName})</p>
                        <p>Minimum VMs: ${minimumVms}</p>
                        <p class="text-sm mt-2">The pool will automatically create and maintain the minimum number of pods.</p>
                    `;
                    
                    // Reset form
                    document.getElementById('createPoolForm').reset();
                    document.getElementById('minimumVms').value = '3';
                    document.getElementById('poolBranchName').value = 'master';
                    document.getElementById('poolGithubUsername').value = '';
                    
                    // Reload pools
                    loadPools();
                } else {
                    statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                    statusEl.innerHTML = `<p>Error: ${data.error || 'Failed to create pool'}</p>`;
                }
            } catch (error) {
                console.error('Error creating pool:', error);
                if (error.message !== 'Authentication required') {
                    statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                    statusEl.innerHTML = '<p>Failed to create pool. Please try again later.</p>';
                }
            }
        }

        // Function to toggle pool workspaces visibility
        async function togglePoolWorkspaces(poolName) {
            const workspacesEl = document.getElementById(`pool-workspaces-${poolName.replace(/[^a-zA-Z0-9]/g, '-')}`);
            
            if (workspacesEl.classList.contains('hidden')) {
                // Load and show workspaces
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodePoolName(poolName)}/workspaces`);
                    const data = await response.json();
                    
                    if (response.ok && data.workspaces) {
                        let workspacesHtml = '<h4 class="font-medium text-gray-700 mb-2">Pool Pods:</h4>';
                        
                        if (data.workspaces.length > 0) {
                            workspacesHtml += '<div class="grid grid-cols-1 lg:grid-cols-2 gap-3">';
                            data.workspaces.forEach(workspace => {
                                const stateBadge = getStateBadge(workspace.state || 'unknown');
                                const usageBadge = getUsageStatusBadge(workspace.usage_status, workspace.user_info);
                                
                                const isRunning = workspace.state === 'running';
                                const isUsed = workspace.usage_status === 'used';
                                
                                workspacesHtml += `
                                    <div class="border rounded p-3 text-sm bg-white">
                                        <div class="flex justify-between items-start mb-2">
                                            <span class="font-medium text-xs">${workspace.id}</span>
                                            <div class="flex flex-col space-y-1">
                                                ${stateBadge}
                                                ${usageBadge}
                                            </div>
                                        </div>
                                        <div class="text-xs text-gray-500 mb-2">
                                            <a href="${workspace.url}" target="_blank" class="text-blue-500 hover:underline">Open Pod</a>
                                        </div>
                                        <div class="text-xs text-gray-400 mb-2">Password: ${workspace.password}</div>
                                        ${workspace.marked_at ? `<div class="text-xs text-gray-400 mb-2">Marked: ${new Date(workspace.marked_at).toLocaleString()}</div>` : ''}
                                        <div class="flex space-x-1">
                                            <button onclick="markWorkspaceAsUsed('${poolName}', '${workspace.id}')" 
                                                class="text-xs py-1 px-2 rounded ${!isRunning || isUsed ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-green-500 text-white hover:bg-green-600'}"
                                                ${!isRunning || isUsed ? 'disabled' : ''}>
                                                Mark Used
                                            </button>
                                            <button onclick="markWorkspaceAsUnused('${poolName}', '${workspace.id}')" 
                                                class="text-xs py-1 px-2 rounded ${!isRunning || !isUsed ? 'bg-gray-300 text-gray-500 cursor-not-allowed' : 'bg-green-500 text-white hover:bg-green-600'}"
                                                ${!isRunning || !isUsed ? 'disabled' : ''}>
                                                Mark Unused
                                            </button>
                                            <button onclick="deletePoolWorkspace('${poolName}', '${workspace.id}')" 
                                                class="text-xs py-1 px-2 rounded bg-red-500 text-white hover:bg-red-600">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                `;
                            });
                            workspacesHtml += '</div>';
                        } else {
                            workspacesHtml += '<p class="text-gray-500 text-sm">No Pods in this pool yet.</p>';
                        }
                        
                        workspacesEl.innerHTML = workspacesHtml;
                    }
                    
                    workspacesEl.classList.remove('hidden');
                } catch (error) {
                    console.error('Error loading pool pods:', error);
                    workspacesEl.innerHTML = '<p class="text-red-500 text-sm">Failed to load Pods.</p>';
                    workspacesEl.classList.remove('hidden');
                }
            } else {
                // Hide workspaces
                workspacesEl.classList.add('hidden');
            }
        }

        async function deletePoolWorkspace(poolName, workspaceId) {
            if (!confirm(`Are you sure you want to delete Pod "${workspaceId}" from pool "${poolName}"? This action cannot be undone.`)) {
                return;
            }
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodePoolName(poolName)}/workspaces/${workspaceId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    alert(`Pod "${workspaceId}" deleted successfully`);
                    // Refresh both the pools list and the expanded workspaces view
                    loadPools();
                    // Re-expand the pool workspaces if they were visible
                    setTimeout(() => {
                        const workspacesEl = document.getElementById(`pool-workspaces-${poolName.replace(/[^a-zA-Z0-9]/g, '-')}`);
                        if (workspacesEl && !workspacesEl.classList.contains('hidden')) {
                            togglePoolWorkspaces(poolName);
                            setTimeout(() => togglePoolWorkspaces(poolName), 100);
                        }
                    }, 500);
                } else {
                    alert(`Error: ${data.error || 'Failed to delete Pod'}`);
                }
            } catch (error) {
                console.error('Error deleting Pod from pool:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to delete Pod. Please try again later.');
                }
            }
        }


        // Function to get an available workspace from pool
        async function getAvailableWorkspace(poolName) {
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodePoolName(poolName)}/workspace`);
                const data = await response.json();
                
                if (response.ok && data.success && data.workspace) {
                    const workspace = data.workspace;
                    const message = `Available Pod found!\n\nID: ${workspace.id}\nURL: ${workspace.url}\nState: ${workspace.state}\n\nOpen Pod now?`;
                    
                    if (confirm(message)) {
                        window.open(workspace.url, '_blank');
                    }
                } else {
                    alert('No available Pod in pool at the moment. Please try again later.');
                }
            } catch (error) {
                console.error('Error getting available Pod:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to get available Pod. Please try again later.');
                }
            }
        }

        // Function to scale a pool
        async function scalePool(poolName) {
            const newMinimum = prompt('Enter new minimum VMs:');
            if (!newMinimum || isNaN(newMinimum) || parseInt(newMinimum) < 1) {
                return;
            }
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodePoolName(poolName)}/scale`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        minimum_vms: parseInt(newMinimum)
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    alert(data.message);
                    loadPools();
                } else {
                    alert(`Error: ${data.error || 'Failed to scale pool'}`);
                }
            } catch (error) {
                console.error('Error scaling pool:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to scale pool. Please try again later.');
                }
            }
        }

        // Function to delete a pool
        async function deletePool(poolName) {
            if (!confirm(`Are you sure you want to delete pool "${poolName}"? This will delete all Pods in the pool. This action cannot be undone.`)) {
                return;
            }
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodePoolName(poolName)}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    alert(data.message);
                    loadPools();
                } else {
                    alert(`Error: ${data.error || 'Failed to delete pool'}`);
                }
            } catch (error) {
                console.error('Error deleting pool:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to delete pool. Please try again later.');
                }
            }
        }

        // Function to create a workspace
        async function createWorkspace() {
            const repoInputs = document.querySelectorAll('#repoInputs .repo-input');

            let repositories = [];
            let branches = [];
            
            for (let i = 0; i < repoInputs.length; i++) {
                const urlInput = repoInputs[i].querySelector('input[id^="githubUrl"]');
                const branchInput = repoInputs[i].querySelector('input[id^="githubBranch"]');
                
                const url = urlInput ? urlInput.value.trim() : '';
                const branch = branchInput ? branchInput.value.trim() : '';
                
                if (url) {
                    repositories.push(url);
                    branches.push(branch || ''); // Empty string for default branch
                }
            }

            if (repositories.length === 0) {
                alert('Please enter at least one GitHub repository URL');
                return;
            }

            const githubPat = document.getElementById('githubPat').value.trim();
            
            let requestData = {
                githubUrls: repositories,
                githubBranches: branches
            };

            if (githubPat) {
                requestData.githubToken = githubPat;
            }

            const githubUsername = document.getElementById('githubUsername').value.trim();

            if (githubUsername) {
                requestData.githubUsername = githubUsername;
            }
            
            // Get image configuration
            const imageConfigType = document.querySelector('input[name="imageConfigType"]:checked').value;
            
            if (imageConfigType === 'custom') {
                const customImageType = document.querySelector('input[name="customImageType"]:checked').value;
                
                if (customImageType === 'dockerImage') {
                    const customImage = document.getElementById('customImageName').value.trim();
                    if (customImage) {
                        requestData.image = customImage;
                    }
                } else {
                    const imageUrl = document.getElementById('customImageUrl').value.trim();
                    if (imageUrl) {
                        requestData.imageUrl = imageUrl;
                    }
                }
            }
            
            const statusEl = document.getElementById('createStatus');
            statusEl.className = 'mt-4 p-4 bg-yellow-100 text-yellow-800 rounded-md';
            statusEl.innerHTML = 'Creating Pod... This may take a few minutes.';
            statusEl.classList.remove('hidden');
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/workspaces`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(requestData)
                });
                
                const data = await response.json();
                
                if (response.ok) {
                    if (data.success) {
                        statusEl.className = 'mt-4 p-4 bg-green-100 text-green-800 rounded-md';
                        
                        const workspace = data.workspace;
                        
                        // Create repository list HTML for the status message
                        let repoListHtml = '';
                        if (workspace.repositories && workspace.repositories.length > 0) {
                            repoListHtml = `
                                <div class="mt-2">
                                    <p class="font-medium">Repositories:</p>
                                    <ul class="list-disc pl-5">
                            `;
                            
                            workspace.repositories.forEach((repo, index) => {
                                const lastSegment = repo.replace(/\/+$/, '').split('/').pop() || '';
                                const repoShortName = lastSegment.replace('.git', '').replace(/^\/+/, '');
                                const displayName = repoShortName || 'repository';
                                
                                let branchInfo = '';
                                if (workspace.branches && workspace.branches[index]) {
                                    branchInfo = ` (${workspace.branches[index]})`;
                                }
                                
                                repoListHtml += `<li>${displayName}${branchInfo}</li>`;
                            });
                            
                            repoListHtml += `
                                    </ul>
                                </div>
                            `;
                        }
                        
                        // Add image info
                        let imageInfoHtml = '';
                        if (workspace.image) {
                            imageInfoHtml = `<p class="text-sm">Image: ${workspace.image}</p>`;
                        } else if (workspace.imageUrl) {
                            imageInfoHtml = `<p class="text-sm">Custom Image: Building from ${workspace.imageUrl}</p>`;
                        }
                        
                        statusEl.innerHTML = `
                            <p class="font-semibold">Pod creation initiated!</p>
                            ${repoListHtml}
                            ${imageInfoHtml}
                            <p class="mt-2">
                                <a href="${workspace.url}" target="_blank" class="text-blue-600 hover:underline">Open Pod</a>
                            </p>
                            <p class="text-xs text-gray-500">Subdomain: ${workspace.fqdn}</p>
                            <p class="mt-1">Password: <code class="bg-gray-100 px-2 py-1 rounded">${workspace.password}</code></p>
                            <p class="text-xs mt-2">Please note: It may take a few minutes for the workspace to be fully ready.</p>
                            <p class="text-xs mt-1">If you're building a custom image, it may take even longer for the first startup.</p>
                        `;
                        
                        // Reset the form
                        document.getElementById('createWorkspaceForm').reset();
                        document.getElementById('repoInputs').innerHTML = `
                            <div class="repo-input">
                                <div class="w-full">
                                    <label for="githubUrl0" class="block text-gray-700 mb-2">GitHub Repository URL</label>
                                    <input type="text" id="githubUrl0" 
                                        placeholder="https://github.com/username/repository" 
                                        class="w-full p-2 border border-gray-300 rounded-md mb-2">
                                    <label for="githubBranch0" class="block text-gray-700 mb-2">Branch (optional)</label>
                                    <input type="text" id="githubBranch0" 
                                        placeholder="main (leave empty for default branch)" 
                                        class="w-full p-2 border border-gray-300 rounded-md">
                                    <p class="text-xs text-gray-500 mt-1">If not specified, the repository's default branch will be used</p>
                                </div>
                            </div>
                        `;
                        repoCounter = 1;
                        toggleCustomImageOptions();
                        
                        // Reload the workspaces list
                        loadWorkspaces();
                    } else {
                        statusEl.className = 'mt-4 p-4 bg-blue-100 text-blue-800 rounded-md';
                        statusEl.innerHTML = `<p>${data.message}</p>`;
                        loadWorkspaces();
                    }
                } else {
                    statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                    statusEl.innerHTML = `<p>Error: ${data.error || 'Something went wrong'}</p>`;
                }
            } catch (error) {
                console.error('Error creating workspace:', error);
                if (error.message !== 'Authentication required') {
                    statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                    statusEl.innerHTML = '<p>Failed to create workspace. Please try again later.</p>';
                }
            }
        }

        // Function to start a workspace
        async function startWorkspace(id) {
            if (!confirm('Start this workspace?')) return;
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/workspaces/${id}/start`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    alert(data.message || 'Workspace starting');
                    loadWorkspaces();
                } else {
                    const data = await response.json();
                    alert(`Error: ${data.error || 'Failed to start workspace'}`);
                }
            } catch (error) {
                console.error('Error starting workspace:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to start workspace. Please try again later.');
                }
            }
        }

        // Function to stop a workspace
        async function stopWorkspace(id) {
            if (!confirm('Stop this Pod?')) return;
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/workspaces/${id}/stop`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    alert(data.message || 'Workspace stopping');
                    loadWorkspaces();
                } else {
                    const data = await response.json();
                    alert(`Error: ${data.error || 'Failed to stop Pod'}`);
                }
            } catch (error) {
                console.error('Error stopping Pod:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to stop Pod. Please try again later.');
                }
            }
        }

        // Function to delete a workspace
        async function deleteWorkspace(id) {
            if (!confirm('Are you sure you want to delete this Pod? This action cannot be undone.')) {
                return;
            }
            
            try {
                const response = await authenticatedFetch(`${API_BASE_URL}/workspaces/${id}/delete`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    const data = await response.json();
                    alert(data.message || 'Pod deleted');
                    loadWorkspaces();
                } else {
                    const data = await response.json();
                    alert(`Error: ${data.error || 'Failed to delete Pod'}`);
                }
            } catch (error) {
                console.error('Error deleting Pod:', error);
                if (error.message !== 'Authentication required') {
                    alert('Failed to delete Pod. Please try again later.');
                }
            }
        }

        // Helper function to get a state badge
        function getStateBadge(state) {
            const stateColors = {
                'running': 'bg-green-100 text-green-800',
                'pending': 'bg-yellow-100 text-yellow-800',
                'terminating': 'bg-orange-100 text-orange-800',
                'failed': 'bg-red-100 text-red-800',
                'unknown': 'bg-gray-100 text-gray-800'
            };
            
            const color = stateColors[state] || stateColors.unknown;
            return `<span class="text-xs px-2 py-1 rounded-full ${color}">${state}</span>`;
        }
        </script>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workspace-ui
  namespace: workspace-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: workspace-ui
  template:
    metadata:
      labels:
        app: workspace-ui
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: workspace-ui
---
apiVersion: v1
kind: Service
metadata:
  name: workspace-ui
  namespace: workspace-system
spec:
  selector:
    app: workspace-ui
  ports:
  - port: 80
    targetPort: 80