apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-ui
  namespace: workspace-system
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Workspace Manager</title>
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    </head>
    <body class="bg-gray-100 font-sans">
        <!-- Login Modal -->
        <div id="loginModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-bold text-gray-900 mb-4">Login to Workspace Manager</h3>
                    <form id="loginForm">
                        <div class="mb-4">
                            <label for="username" class="block text-gray-700 text-sm font-bold mb-2">Username:</label>
                            <input type="text" id="username" name="username" required
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        </div>
                        <div class="mb-6">
                            <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password:</label>
                            <input type="password" id="password" name="password" required
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        </div>
                        <div id="loginError" class="mb-4 text-red-500 text-sm hidden"></div>
                        <div class="flex items-center justify-between">
                            <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                Sign In
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div id="mainContent" class="container mx-auto p-4 hidden">
            <!-- Header with Navigation and Logout -->
            <div class="flex justify-between items-center mb-6">
                <div class="flex items-center space-x-6">
                    <h1 class="text-3xl font-bold">Workspace Manager</h1>
                    <a href="/pools" class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors">
                        Pool Management
                    </a>
                </div>
                <div class="flex items-center space-x-4">
                    <span id="userInfo" class="text-gray-600"></span>
                    <button id="logoutBtn" class="bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-600">
                        Logout
                    </button>
                </div>
            </div>
            
            <!-- Create Workspace Form -->
            <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                <h2 class="text-xl font-semibold mb-4">Create New Workspace</h2>
                <form id="createWorkspaceForm">
                    <!-- Repository Inputs -->
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-3">Repositories</h3>
                        <div id="repoInputs" class="space-y-3 mb-4">
                            <div class="repo-input">
                                <div class="w-full">
                                    <label for="githubUrl0" class="block text-gray-700 mb-2">GitHub Repository URL</label>
                                    <input type="text" id="githubUrl0" 
                                        placeholder="https://github.com/username/repository" 
                                        class="w-full p-2 border border-gray-300 rounded-md mb-2">
                                    <label for="githubBranch0" class="block text-gray-700 mb-2">Branch Name (leave empty for default branch)</label>
                                    <input type="text" id="githubBranch0" 
                                        placeholder="Leave empty to use default branch" 
                                        class="w-full p-2 border border-gray-300 rounded-md">
                                    <p class="text-xs text-gray-500 mt-1">The default branch will be used if left empty</p>
                                </div>
                            </div>
                        </div>
                        <div class="flex space-x-2 mb-4">
                            <button type="button" id="addRepoBtn" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-300">
                                + Add Repository
                            </button>
                        </div>
                    </div>
                    
                    <!-- GitHub PAT Input -->
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-3">GitHub Access Token (Optional)</h3>
                        <input type="password" id="githubPat" 
                            placeholder="Personal Access Token for private repos" 
                            class="w-full p-2 border border-gray-300 rounded-md">
                        <p class="text-xs text-gray-500 mt-1">
                            If you want to clone private repositories, enter a GitHub Personal Access Token (PAT) here.<br>
                            <span class="text-red-500">Do not reuse tokens you use elsewhere. Create a new token with only <b>repo</b> access.</span>
                        </p>
                    </div>
                    
                    <!-- Custom Image Settings -->
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-3">Image Configuration</h3>
                        
                        <div class="mb-4">
                            <label class="inline-flex items-center">
                                <input type="radio" name="imageConfigType" value="default" checked class="form-radio">
                                <span class="ml-2">Use Default Image (linuxserver/code-server:latest)</span>
                            </label>
                        </div>
                        
                        <div class="mb-4">
                            <label class="inline-flex items-center">
                                <input type="radio" name="imageConfigType" value="custom" class="form-radio">
                                <span class="ml-2">Use Custom Image</span>
                            </label>
                            
                            <div id="customImageOptions" class="mt-3 ml-6 hidden">
                                <div class="mb-3">
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="customImageType" value="dockerImage" checked class="form-radio">
                                        <span class="ml-2">Specify Docker Image</span>
                                    </label>
                                    <div class="mt-2">
                                        <input type="text" id="customImageName" 
                                            placeholder="e.g., myorg/code-server:v2" 
                                            class="w-full p-2 border border-gray-300 rounded-md">
                                        <p class="text-xs text-gray-500 mt-1">Must be compatible with linuxserver/code-server base image</p>
                                    </div>
                                </div>
                                
                                <div>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="customImageType" value="imageUrl" class="form-radio">
                                        <span class="ml-2">Build from URL</span>
                                    </label>
                                    <div class="mt-2">
                                        <input type="text" id="customImageUrl" 
                                            placeholder="https://github.com/myorg/my-custom-image" 
                                            class="w-full p-2 border border-gray-300 rounded-md" disabled>
                                        <p class="text-xs text-gray-500 mt-1">URL to GitHub repository or ZIP file containing Dockerfile</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600">
                        Create Workspace
                    </button>
                </form>
                <div id="createStatus" class="mt-4 hidden"></div>
            </div>
            
            <!-- Workspaces List -->
            <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                <h2 class="text-xl font-semibold mb-4">Your Workspaces</h2>
                <div id="workspacesList" class="space-y-4">
                    <p class="text-gray-500">Loading workspaces...</p>
                </div>
            </div>

                <!-- Create Pool Form -->
                <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                    <h3 class="text-lg font-medium mb-4">Create New Pool</h3>
                    <form id="createPoolForm">
                        <!-- Repository Configuration -->
                        <div class="mb-6">
                            <h4 class="text-md font-medium mb-3">Repository Configuration</h4>
                            <div class="grid grid-cols-1 gap-4">
                                <div>
                                    <label class="block text-gray-700 text-sm font-bold mb-2">Repository URL:</label>
                                    <input type="text" id="repoName" required 
                                        placeholder="https://github.com/username/repository"
                                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                                </div>
                                <div>
                                    <label class="block text-gray-700 text-sm font-bold mb-2">Branch Name:</label>
                                    <input type="text" id="branchName" 
                                        placeholder="Leave empty to use default branch"
                                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                                    <p class="text-xs text-gray-500 mt-1">The default branch will be used if left empty</p>
                                </div>
                            </div>
                        </div>

                        <!-- Pool Settings -->
                        <div class="mb-6">
                            <h4 class="text-md font-medium mb-3">Pool Settings</h4>
                            <div class="grid grid-cols-1 gap-4">
                                <div>
                                    <label class="block text-gray-700 text-sm font-bold mb-2">Pool Name:</label>
                                    <input type="text" id="poolName" required
                                        placeholder="my-dev-pool"
                                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                                    <p class="text-xs text-gray-500 mt-1">A unique name for your pool</p>
                                </div>
                                <div>
                                    <label class="block text-gray-700 text-sm font-bold mb-2">Minimum VMs:</label>
                                    <input type="number" id="minimumVMs" required min="1" value="1"
                                        class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                                    <p class="text-xs text-gray-500 mt-1">Minimum number of VMs to maintain in the pool</p>
                                </div>
                            </div>
                        </div>

                        <!-- GitHub PAT -->
                        <div class="mb-6">
                            <h4 class="text-md font-medium mb-3">GitHub Access Token (Optional)</h4>
                            <input type="password" id="poolGithubPat" 
                                placeholder="Personal Access Token for private repos"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                            <p class="text-xs text-gray-500 mt-1">
                                If you want to use private repositories, enter a GitHub Personal Access Token (PAT) here.<br>
                                <span class="text-red-500">Do not reuse tokens you use elsewhere. Create a new token with only <b>repo</b> access.</span>
                            </p>
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600">
                                Create Pool
                            </button>
                        </div>
                    </form>
                    <div id="createPoolStatus" class="mt-4 hidden"></div>
                </div>

                <!-- Pools List -->
                <div class="bg-white p-6 rounded-lg shadow-md">
                    <h3 class="text-lg font-medium mb-4">Your Pools</h3>
                    <div id="poolsList" class="space-y-4">
                        <p class="text-gray-500">Loading pools...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Pool Modal -->
        <div id="editPoolModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-bold text-gray-900 mb-4">Edit Pool</h3>
                    <form id="editPoolForm">
                        <input type="hidden" id="editPoolOriginalName">
                        
                        <!-- Repository Configuration -->
                        <div class="mb-6">
                            <h4 class="text-md font-medium mb-3">Repository Configuration</h4>
                            <div>
                                <label class="block text-gray-700 text-sm font-bold mb-2">Repository URL:</label>
                                <input type="text" id="editRepoName" required
                                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                            </div>
                            <div class="mt-3">
                                <label class="block text-gray-700 text-sm font-bold mb-2">Branch Name:</label>
                                <input type="text" id="editBranchName"
                                    placeholder="Leave empty to use default branch"
                                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                            </div>
                        </div>

                        <!-- Pool Settings -->
                        <div class="mb-6">
                            <h4 class="text-md font-medium mb-3">Pool Settings</h4>
                            <div>
                                <label class="block text-gray-700 text-sm font-bold mb-2">Pool Name:</label>
                                <input type="text" id="editPoolName" required
                                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                            </div>
                            <div class="mt-3">
                                <label class="block text-gray-700 text-sm font-bold mb-2">Minimum VMs:</label>
                                <input type="number" id="editMinimumVMs" required min="1"
                                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                            </div>
                        </div>

                        <!-- GitHub PAT -->
                        <div class="mb-6">
                            <h4 class="text-md font-medium mb-3">GitHub Access Token</h4>
                            <input type="password" id="editPoolGithubPat"
                                placeholder="Enter new token or leave empty to keep existing"
                                class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                            <p class="text-xs text-gray-500 mt-1">Leave empty to keep existing token</p>
                        </div>

                        <div class="flex items-center justify-between">
                            <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600">
                                Save Changes
                            </button>
                            <button type="button" onclick="closeEditPoolModal()" class="bg-gray-500 text-white py-2 px-4 rounded-md hover:bg-gray-600">
                                Cancel
                            </button>
                        </div>
                    </form>
                </div>
            </div>

        <script>
            const API_BASE_URL = '/api';
            let repoCounter = 1;
            let authToken = null;
            let currentUser = null;

            // Authentication utilities
            class Auth {
                static getToken() {
                    return localStorage.getItem('workspace_auth_token');
                }
                
                static setToken(token) {
                    localStorage.setItem('workspace_auth_token', token);
                    authToken = token;
                }
                
                static removeToken() {
                    localStorage.removeItem('workspace_auth_token');
                    localStorage.removeItem('workspace_user_info');
                    authToken = null;
                    currentUser = null;
                }
                
                static getUserInfo() {
                    const userInfo = localStorage.getItem('workspace_user_info');
                    return userInfo ? JSON.parse(userInfo) : null;
                }
                
                static setUserInfo(userInfo) {
                    localStorage.setItem('workspace_user_info', JSON.stringify(userInfo));
                    currentUser = userInfo;
                }
                
                static isAuthenticated() {
                    const token = this.getToken();
                    if (!token) return false;
                    
                    try {
                        // Simple JWT expiration check
                        const payload = JSON.parse(atob(token.split('.')[1]));
                        return payload.exp * 1000 > Date.now();
                    } catch (e) {
                        return false;
                    }
                }
                
                static getAuthHeaders() {
                    const token = this.getToken();
                    return token ? { 'Authorization': `Bearer ${token}` } : {};
                }
            }
            
            // Initialize on page load
            document.addEventListener('DOMContentLoaded', function() {
                initializeApp();
            });
            
            function initializeApp() {
                authToken = Auth.getToken();
                currentUser = Auth.getUserInfo();
                
                if (Auth.isAuthenticated()) {
                    showMainContent();
                    loadWorkspaces();
                    loadPools();
                    setupFormListeners();
                    setupPoolManagement();
                } else {
                    showLoginModal();
                }
                
                setupAuthListeners();
            }
            
            function setupAuthListeners() {
                // Login form
                document.getElementById('loginForm').addEventListener('submit', handleLogin);
                
                // Logout button
                document.getElementById('logoutBtn').addEventListener('click', handleLogout);
            }
            
            function showLoginModal() {
                document.getElementById('loginModal').classList.remove('hidden');
                document.getElementById('mainContent').classList.add('hidden');
            }
            
            function showMainContent() {
                document.getElementById('loginModal').classList.add('hidden');
                document.getElementById('mainContent').classList.remove('hidden');
                
                if (currentUser) {
                    document.getElementById('userInfo').textContent = `Welcome, ${currentUser.username}`;
                }
            }
            
            async function handleLogin(e) {
                e.preventDefault();
                
                const username = document.getElementById('username').value;
                const password = document.getElementById('password').value;
                const loginError = document.getElementById('loginError');
                
                try {
                    const response = await fetch(`${API_BASE_URL}/auth/login`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ username, password })
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok && data.success) {
                        Auth.setToken(data.token);
                        Auth.setUserInfo(data.user);
                        currentUser = data.user;
                        
                        showMainContent();
                        loadWorkspaces();
                        setupFormListeners();
                        
                        // Clear form
                        document.getElementById('loginForm').reset();
                        loginError.classList.add('hidden');
                    } else {
                        loginError.textContent = data.error || 'Login failed';
                        loginError.classList.remove('hidden');
                    }
                } catch (error) {
                    console.error('Login error:', error);
                    loginError.textContent = 'Login failed. Please try again.';
                    loginError.classList.remove('hidden');
                }
            }
            
            function handleLogout() {
                if (confirm('Are you sure you want to logout?')) {
                    Auth.removeToken();
                    showLoginModal();
                }
            }
            
            // Modified fetch function to include auth headers
            async function authenticatedFetch(url, options = {}) {
                const authHeaders = Auth.getAuthHeaders();
                
                const config = {
                    ...options,
                    headers: {
                        ...authHeaders,
                        ...options.headers
                    }
                };
                
                const response = await fetch(url, config);
                
                // Handle 401 Unauthorized
                if (response.status === 401) {
                    Auth.removeToken();
                    showLoginModal();
                    throw new Error('Authentication required');
                }
                
                return response;
            }
            
            // Setup form listeners
            function setupFormListeners() {
                // Add repository button
                document.getElementById('addRepoBtn').addEventListener('click', addRepositoryInput);
                
                // Image config type radio buttons
                const imageConfigRadios = document.querySelectorAll('input[name="imageConfigType"]');
                imageConfigRadios.forEach(radio => {
                    radio.addEventListener('change', toggleCustomImageOptions);
                });
                
                // Custom image type radio buttons
                const customImageTypeRadios = document.querySelectorAll('input[name="customImageType"]');
                customImageTypeRadios.forEach(radio => {
                    radio.addEventListener('change', toggleCustomImageInputs);
                });
                
                // Form submission
                document.getElementById('createWorkspaceForm').addEventListener('submit', function(e) {
                    e.preventDefault();
                    createWorkspace();
                });
            }
            
            // Add a new repository input
            function addRepositoryInput() {
                const repoInputs = document.getElementById('repoInputs');
                const newInput = document.createElement('div');
                newInput.className = 'repo-input';
                newInput.innerHTML = `
                    <div class="w-full border border-gray-200 rounded-md p-3 mb-3">
                        <div class="flex justify-between items-start mb-2">
                            <label for="githubUrl${repoCounter}" class="block text-gray-700 font-medium">Additional Repository URL</label>
                            <button type="button" class="remove-repo-btn bg-red-500 text-white py-1 px-3 rounded-md text-sm hover:bg-red-600">
                                Remove
                            </button>
                        </div>
                        <input type="text" id="githubUrl${repoCounter}" 
                            placeholder="https://github.com/username/repository" 
                            class="w-full p-2 border border-gray-300 rounded-md mb-2">
                        <label for="githubBranch${repoCounter}" class="block text-gray-700 mb-2">Branch Name (leave empty for default branch)</label>
                        <input type="text" id="githubBranch${repoCounter}" 
                            placeholder="Leave empty to use default branch" 
                            class="w-full p-2 border border-gray-300 rounded-md">
                        <p class="text-xs text-gray-500 mt-1">The default branch will be used if left empty</p>
                    </div>
                `;
                repoInputs.appendChild(newInput);
                
                // Add event listener to remove button
                newInput.querySelector('.remove-repo-btn').addEventListener('click', function() {
                    repoInputs.removeChild(newInput);
                });
                
                repoCounter++;
            }
            
            // Toggle custom image options visibility
            function toggleCustomImageOptions() {
                const customImageOptions = document.getElementById('customImageOptions');
                if (document.querySelector('input[name="imageConfigType"]:checked').value === 'custom') {
                    customImageOptions.classList.remove('hidden');
                } else {
                    customImageOptions.classList.add('hidden');
                }
            }
            
            // Toggle between Docker image name and URL inputs
            function toggleCustomImageInputs() {
                const imageNameInput = document.getElementById('customImageName');
                const imageUrlInput = document.getElementById('customImageUrl');
                
                if (document.querySelector('input[name="customImageType"]:checked').value === 'dockerImage') {
                    imageNameInput.disabled = false;
                    imageUrlInput.disabled = true;
                } else {
                    imageNameInput.disabled = true;
                    imageUrlInput.disabled = false;
                }
            }
            
            // Function to load workspaces (updated with auth)
            async function loadWorkspaces() {
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/workspaces`);
                    const data = await response.json();
                    
                    const workspacesList = document.getElementById('workspacesList');
                    
                    if (data.workspaces && data.workspaces.length > 0) {
                        workspacesList.innerHTML = '';
                        
                        data.workspaces.forEach(workspace => {
                            if (!workspace) return; // Skip if workspace is undefined
                            const workspaceEl = document.createElement('div');
                            workspaceEl.className = 'border border-gray-200 rounded-md p-4';
                            
                            // Safely get repository name
                            let repoName;
                            try {
                                if (workspace.repositories && workspace.repositories.length > 0) {
                                    repoName = workspace.repositories[0].split('/').pop().replace('.git', '');
                                } else if (workspace.repository) {
                                    repoName = workspace.repository.split('/').pop().replace('.git', '');
                                } else if (workspace.repoName) {
                                    repoName = workspace.repoName;
                                } else {
                                    return;
                                }
                            } catch (e) {
                                console.warn('Error parsing repository name:', e);
                                repoName = 'Unnamed Workspace';
                            }
                            try {
                                if (workspace.repoName) {
                                    repoName = workspace.repoName;
                                } else if (workspace.repositories && workspace.repositories.length > 0) {
                                    repoName = workspace.repositories[0].split('/').pop().replace('.git', '');
                                } else if (workspace.repository) {
                                    repoName = workspace.repository.split('/').pop().replace('.git', '');
                                }
                            } catch (e) {
                                console.warn('Error parsing repository name:', e);
                            }
                            
                            const stateBadge = getStateBadge(workspace.state || 'unknown');

                            // Create repository list HTML
                            let repoListHtml = '';
                            if (workspace.repositories && workspace.repositories.length > 0) {
                                repoListHtml = `
                                    <div class="mt-2 border-t pt-2">
                                        <p class="text-sm font-medium text-gray-700">Repositories:</p>
                                        <ul class="text-sm text-gray-600 list-disc pl-5">
                                `;
                                
                                workspace.repositories.forEach((repo, index) => {
                                    const repoShortName = repo.split('/').pop().replace('.git', '');
                                    let branchInfo = '';
                                    if (workspace.branches && workspace.branches[index]) {
                                        branchInfo = ` <span class="text-xs text-blue-600">(${workspace.branches[index]})</span>`;
                                    }
                                    repoListHtml += `<li>${repoShortName}${branchInfo} <span class="text-xs text-gray-500">(${repo})</span></li>`;
                                });
                                
                                repoListHtml += `
                                        </ul>
                                    </div>
                                `;
                            } else if (workspace.repository) {
                                // For backward compatibility with old workspaces
                                let branchInfo = '';
                                if (workspace.branch) {
                                    branchInfo = ` <span class="text-xs text-blue-600">(${workspace.branch})</span>`;
                                }
                                repoListHtml = `
                                    <div class="mt-2">
                                        <p class="text-sm text-gray-600">${workspace.repository}${branchInfo}</p>
                                    </div>
                                `;
                            }
                            
                            // Add image info
                            let imageInfoHtml = '';
                            if (workspace.image) {
                                imageInfoHtml = `<p class="text-xs text-gray-500 mt-1">Image: ${workspace.image}</p>`;
                            } else if (workspace.imageUrl) {
                                imageInfoHtml = `<p class="text-xs text-gray-500 mt-1">Custom Image: Built from ${workspace.imageUrl}</p>`;
                            }
                            
                            workspaceEl.innerHTML = `
                                <div class="flex justify-between items-start">
                                    <div>
                                        <div class="flex items-center">
                                            <h3 class="font-semibold text-lg">${repoName}</h3>
                                            <span class="ml-2">${stateBadge}</span>
                                        </div>
                                        ${repoListHtml || ''}
                                        ${workspace.id ? `<p class="mt-1 text-xs text-gray-500">ID: ${workspace.id}</p>` : ''}
                                        ${workspace.fqdn ? `<p class="mt-1 text-xs text-gray-500">Subdomain: ${workspace.fqdn}</p>` : ''}
                                        ${imageInfoHtml}
                                        ${workspace.url ? `
                                        <p class="mt-2">
                                            <a href="${workspace.url}" target="_blank" class="text-blue-500 hover:underline">
                                                Open Workspace
                                            </a>
                                        </p>
                                        ` : ''}
                                    </div>
                                    <div class="space-x-2">
                                        <button onclick="startWorkspace('${workspace.id}')" 
                                            class="bg-green-500 text-white py-1 px-3 rounded-md text-sm"
                                            ${workspace.state === 'running' ? 'disabled' : ''}>
                                            Start
                                        </button>
                                        <button onclick="stopWorkspace('${workspace.id}')"
                                            class="bg-yellow-500 text-white py-1 px-3 rounded-md text-sm"
                                            ${workspace.state !== 'running' ? 'disabled' : ''}>
                                            Stop
                                        </button>
                                        <button onclick="deleteWorkspace('${workspace.id}')" class="bg-red-500 text-white py-1 px-3 rounded-md text-sm">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                                <div class="mt-2 text-sm">
                                    <span class="text-gray-600">Created: ${new Date(workspace.created).toLocaleString()}</span>
                                </div>
                            `;
                            
                            workspacesList.appendChild(workspaceEl);
                        });
                    } else {
                        workspacesList.innerHTML = '<p class="text-gray-500">No workspaces found. Create one to get started.</p>';
                    }
                } catch (error) {
                    console.error('Error loading workspaces:', error);
                    if (error.message !== 'Authentication required') {
                        document.getElementById('workspacesList').innerHTML = 
                            '<p class="text-red-500">Failed to load workspaces. Please try again later.</p>';
                    }
                }
            }
            
            // Function to create a workspace (updated with auth and branch support)
            async function createWorkspace() {
                const repoInputs = document.querySelectorAll('#repoInputs .repo-input');

                let repositories = [];
                let branches = [];
                
                for (let i = 0; i < repoInputs.length; i++) {
                    const urlInput = repoInputs[i].querySelector('input[id^="githubUrl"]');
                    const branchInput = repoInputs[i].querySelector('input[id^="githubBranch"]');
                    
                    const url = urlInput ? urlInput.value.trim() : '';
                    const branch = branchInput ? branchInput.value.trim() : '';
                    
                    if (url) {
                        repositories.push(url);
                        branches.push(branch || ''); // Empty string for default branch
                    }
                }

                if (repositories.length === 0) {
                    alert('Please enter at least one GitHub repository URL');
                    return;
                }

                const githubPat = document.getElementById('githubPat').value.trim();
                
                let requestData = {
                    githubUrls: repositories,
                    githubBranches: branches
                };

                if (githubPat) {
                    requestData.githubToken = githubPat;
                }
                
                // Get image configuration
                const imageConfigType = document.querySelector('input[name="imageConfigType"]:checked').value;
                
                if (imageConfigType === 'custom') {
                    const customImageType = document.querySelector('input[name="customImageType"]:checked').value;
                    
                    if (customImageType === 'dockerImage') {
                        const customImage = document.getElementById('customImageName').value.trim();
                        if (customImage) {
                            requestData.image = customImage;
                        }
                    } else {
                        const imageUrl = document.getElementById('customImageUrl').value.trim();
                        if (imageUrl) {
                            requestData.imageUrl = imageUrl;
                        }
                    }
                }
                
                const statusEl = document.getElementById('createStatus');
                statusEl.className = 'mt-4 p-4 bg-yellow-100 text-yellow-800 rounded-md';
                statusEl.innerHTML = 'Creating workspace... This may take a few minutes.';
                statusEl.classList.remove('hidden');
                
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/workspaces`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        statusEl.className = 'mt-4 p-4 bg-green-100 text-green-800 rounded-md';
                        
                        const workspace = data.workspace;
                        
                        // Create repository list HTML for the status message
                        let repoListHtml = '';
                        if (workspace.repositories && workspace.repositories.length > 0) {
                            repoListHtml = `
                                <div class="mt-2">
                                    <p class="font-medium">Repositories:</p>
                                    <ul class="list-disc pl-5">
                            `;
                            
                            workspace.repositories.forEach((repo, index) => {
                                const lastSegment = repo.replace(/\/+$/, '').split('/').pop() || '';
                                const repoShortName = lastSegment.replace('.git', '').replace(/^\/+/, '');
                                const displayName = repoShortName || 'repository';
                                
                                let branchInfo = '';
                                if (workspace.branches && workspace.branches[index]) {
                                    branchInfo = ` (${workspace.branches[index]})`;
                                }
                                
                                repoListHtml += `<li>${displayName}${branchInfo}</li>`;
                            });
                            
                            repoListHtml += `
                                    </ul>
                                </div>
                            `;
                        }
                        
                        // Add image info
                        let imageInfoHtml = '';
                        if (workspace.image) {
                            imageInfoHtml = `<p class="text-sm">Image: ${workspace.image}</p>`;
                        } else if (workspace.imageUrl) {
                            imageInfoHtml = `<p class="text-sm">Custom Image: Building from ${workspace.imageUrl}</p>`;
                        }
                        
                        statusEl.innerHTML = `
                            <p class="font-semibold">Workspace creation initiated!</p>
                            ${repoListHtml}
                            ${imageInfoHtml}
                            <p class="mt-2">
                                <a href="${workspace.url}" target="_blank" class="text-blue-600 hover:underline">Open Workspace</a>
                            </p>
                            <p class="text-xs text-gray-500">Subdomain: ${workspace.fqdn}</p>
                            <p class="mt-1">Password: <code class="bg-gray-100 px-2 py-1 rounded">${workspace.password}</code></p>
                            <p class="text-xs mt-2">Please note: It may take a few minutes for the workspace to be fully ready.</p>
                            <p class="text-xs mt-1">If you're building a custom image, it may take even longer for the first startup.</p>
                        `;
                        
                        // Reset the form
                        document.getElementById('createWorkspaceForm').reset();
                        document.getElementById('repoInputs').innerHTML = `
                            <div class="repo-input">
                                <div class="w-full">
                                    <label for="githubUrl0" class="block text-gray-700 mb-2">GitHub Repository URL</label>
                                    <input type="text" id="githubUrl0" 
                                        placeholder="https://github.com/username/repository" 
                                        class="w-full p-2 border border-gray-300 rounded-md mb-2">
                                    <label for="githubBranch0" class="block text-gray-700 mb-2">Branch Name</label>
                                    <input type="text" id="githubBranch0" 
                                        placeholder="Leave empty to use default branch" 
                                        class="w-full p-2 border border-gray-300 rounded-md">
                                    <p class="text-xs text-gray-500 mt-1">The default branch will be used if left empty</p>
                                </div>
                            </div>
                        `;
                        repoCounter = 1;
                        toggleCustomImageOptions();
                        
                        // Reload the workspaces list
                        loadWorkspaces();
                    } else {
                        statusEl.className = 'mt-4 p-4 bg-blue-100 text-blue-800 rounded-md';
                        statusEl.innerHTML = `<p>${data.message}</p>`;
                        loadWorkspaces();
                    }
                } catch (error) {
                    console.error('Error creating workspace:', error);
                    if (error.message !== 'Authentication required') {
                        statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                        statusEl.innerHTML = '<p>Failed to create workspace. Please try again later.</p>';
                    }
                }
            }
            
            // Function to start a workspace (updated with auth)
            async function startWorkspace(id) {
                if (!confirm('Start this workspace?')) return;
                
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/workspaces/${id}/start`, {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message || 'Workspace starting');
                        loadWorkspaces();
                    } else {
                        const data = await response.json();
                        alert(`Error: ${data.error || 'Failed to start workspace'}`);
                    }
                } catch (error) {
                    console.error('Error starting workspace:', error);
                    if (error.message !== 'Authentication required') {
                        alert('Failed to start workspace. Please try again later.');
                    }
                }
            }
            
            // Function to stop a workspace (updated with auth)
            async function stopWorkspace(id) {
                if (!confirm('Stop this workspace?')) return;
                
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/workspaces/${id}/stop`, {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message || 'Workspace stopping');
                        loadWorkspaces();
                    } else {
                        const data = await response.json();
                        alert(`Error: ${data.error || 'Failed to stop workspace'}`);
                    }
                } catch (error) {
                    console.error('Error stopping workspace:', error);
                    if (error.message !== 'Authentication required') {
                        alert('Failed to stop workspace. Please try again later.');
                    }
                }
            }
            
            // Function to delete a workspace (updated with auth)
            async function deleteWorkspace(id) {
                if (!confirm('Are you sure you want to delete this workspace? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/workspaces/${id}/delete`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message || 'Workspace deleted');
                        loadWorkspaces();
                    } else {
                        const data = await response.json();
                        alert(`Error: ${data.error || 'Failed to delete workspace'}`);
                    }
                } catch (error) {
                    console.error('Error deleting workspace:', error);
                    if (error.message !== 'Authentication required') {
                        alert('Failed to delete workspace. Please try again later.');
                    }
                }
            }
            
            // Add delete pool function
            async function deletePool(poolName) {
                if (!confirm('Are you sure you want to delete this pool? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools/${poolName}`, {
                        method: 'DELETE'
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        alert('Pool deleted successfully');
                        loadPools();  // Refresh the pools list
                    } else {
                        alert(`Error: ${data.error || 'Failed to delete pool'}`);
                    }
                } catch (error) {
                    console.error('Error deleting pool:', error);
                    if (error.message !== 'Authentication required') {
                        alert('Failed to delete pool. Please try again later.');
                    }
                }
            }

            // Helper function to get a state badge
            function getStateBadge(state) {
                const stateColors = {
                    'running': 'bg-green-100 text-green-800',
                    'pending': 'bg-yellow-100 text-yellow-800',
                    'terminating': 'bg-orange-100 text-orange-800',
                    'failed': 'bg-red-100 text-red-800',
                    'unknown': 'bg-gray-100 text-gray-800'
                };
                
                const color = stateColors[state] || stateColors.unknown;
                return `<span class="text-xs px-2 py-1 rounded-full ${color}">${state}</span>`;
            }

            // Pool Management Functions
            function setupPoolManagement() {
                const createPoolForm = document.getElementById('createPoolForm');
                const editPoolForm = document.getElementById('editPoolForm');
                
                createPoolForm.addEventListener('submit', handleCreatePool);
                editPoolForm.addEventListener('submit', handleEditPool);
                
                loadPools();
            }

            async function loadPools() {
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools`);
                    const data = await response.json();
                    
                    const poolsList = document.getElementById('poolsList');
                    
                    if (data.pools && data.pools.length > 0) {
                        poolsList.innerHTML = '';
                        
                        data.pools.forEach(pool => {
                            const poolEl = document.createElement('div');
                            poolEl.className = 'border border-gray-200 rounded-md p-4 mb-4';
                            
                            const healthBadge = pool.is_healthy 
                                ? '<span class="text-xs px-2 py-1 rounded-full bg-green-100 text-green-800">Healthy</span>'
                                : '<span class="text-xs px-2 py-1 rounded-full bg-red-100 text-red-800">Unhealthy</span>';
                            
                            const statusMessage = pool.status_message || 'No status message available';

                            // Get current and target VM counts
                            const currentVMs = pool.workspace_count || 0;
                            const targetVMs = pool.minimum_vms || 0;
                            const vmStatusColor = currentVMs >= targetVMs ? 'text-green-600' : 'text-yellow-600';

                            poolEl.innerHTML = `
                                <div class="flex justify-between items-start">
                                    <div class="flex-grow">
                                        <div class="flex items-center space-x-2 mb-2">
                                            <h3 class="text-xl font-semibold">${pool.name}</h3>
                                            ${healthBadge}
                                        </div>
                                        
                                        <!-- Repository info -->
                                        <div class="bg-gray-50 p-3 rounded-md mb-3">
                                            <p class="text-sm">
                                                <span class="font-medium">Repository:</span> 
                                                ${pool.repo_name}
                                            </p>
                                            <p class="text-sm">
                                                <span class="font-medium">Branch:</span> 
                                                ${pool.branch_name || 'default'}
                                            </p>
                                            <p class="text-sm mt-2">
                                                <span class="font-medium">Status:</span> 
                                                <span class="text-gray-600">${statusMessage}</span>
                                            </p>
                                        </div>
                                        
                                        <!-- VM stats -->
                                        <div class="grid grid-cols-3 gap-4 mb-3">
                                            <div class="bg-white p-3 rounded-lg shadow-sm border">
                                                <h4 class="text-sm font-medium text-gray-500">Current VMs</h4>
                                                <p class="text-2xl font-bold ${vmStatusColor}">${currentVMs}</p>
                                            </div>
                                            <div class="bg-white p-3 rounded-lg shadow-sm border">
                                                <h4 class="text-sm font-medium text-gray-500">Target VMs</h4>
                                                <p class="text-2xl font-bold text-blue-600">${targetVMs}</p>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Action buttons -->
                                    <div class="flex space-x-2">
                                        <button onclick="editPool('${pool.name}')" 
                                            class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-md text-sm transition duration-200">
                                            Edit
                                        </button>
                                        <button onclick="deletePool('${pool.name}')" 
                                            class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-md text-sm transition duration-200">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            `;
                            
                            poolsList.appendChild(poolEl);
                        });
                    } else {
                        poolsList.innerHTML = '<p class="text-gray-500">No pools found. Create one to get started.</p>';
                    }
                } catch (error) {
                    console.error('Error loading pools:', error);
                    if (error.message !== 'Authentication required') {
                        document.getElementById('poolsList').innerHTML = 
                            '<p class="text-red-500">Failed to load pools. Please try again later.</p>';
                    }
                }
            }

            async function usePoolVMs(poolName) {
                try {
                    // Get all VMs in the pool (both available and in-use)
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools/${encodeURIComponent(poolName)}/workspaces`);
                    if (!response.ok) {
                        throw new Error(`Failed to fetch VMs: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    if (!data || !data.workspaces) {
                        throw new Error('Invalid response format');
                    }
                    
                    // Process the VMs to ensure proper ID handling
                    data.workspaces = data.workspaces.map(vm => ({
                        ...vm,
                        effective_id: vm.workspace_id || vm.id || vm.name,
                        status: vm.status || (vm.in_use ? 'In Use' : 'Available')
                    }));
                    
                    if (data.workspaces.length === 0) {
                        alert('No VMs found in this pool.');
                        return;
                    }

                    // Count available and in-use VMs
                    const availableVMs = data.workspaces.filter(vm => !vm.in_use).length;
                    const inUseVMs = data.workspaces.filter(vm => vm.in_use).length;
                    
                    // Update the pool information with the VM counts
                    return {
                        availableVMs,
                        inUseVMs,
                        totalVMs: data.workspaces.length,
                        workspaces: data.workspaces
                    };
                } catch (error) {
                    console.error('Error fetching pool VMs:', error);
                    throw error;
                }
            }


            // Add handle create pool function
            async function handleCreatePool(e) {
                e.preventDefault();
                
                const poolData = {
                    name: document.getElementById('poolName').value.trim(),
                    minimum_vms: parseInt(document.getElementById('minimumVMs').value, 10),
                    repo_name: document.getElementById('repoName').value.trim(),
                    branch_name: document.getElementById('branchName').value.trim() || null,
                    github_pat: document.getElementById('poolGithubPat').value.trim() || null
                };

                const statusEl = document.getElementById('createPoolStatus');
                statusEl.className = 'mt-4 p-4 bg-yellow-100 text-yellow-800 rounded-md';
                statusEl.innerHTML = 'Creating pool...';
                statusEl.classList.remove('hidden');

                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(poolData)
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        statusEl.className = 'mt-4 p-4 bg-green-100 text-green-800 rounded-md';
                        statusEl.innerHTML = 'Pool created successfully!';
                        
                        // Reset the form
                        document.getElementById('createPoolForm').reset();
                        
                        // Reload the pools list
                        loadPools();
                    } else {
                        statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                        statusEl.innerHTML = `Error: ${data.error || 'Failed to create pool'}`;
                    }
                } catch (error) {
                    console.error('Error creating pool:', error);
                    if (error.message !== 'Authentication required') {
                        statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                        statusEl.innerHTML = 'Failed to create pool. Please try again later.';
                    }
                }
            }

            async function editPool(poolName) {
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools/${poolName}`);
                    const pool = await response.json();
                    
                    // Populate the edit form
                    document.getElementById('editPoolOriginalName').value = pool.name;
                    document.getElementById('editPoolName').value = pool.name;
                    document.getElementById('editMinimumVMs').value = pool.minimum_vms;
                    document.getElementById('editRepoName').value = pool.repo_name;
                    document.getElementById('editBranchName').value = pool.branch_name || '';
                    // Don't populate the GitHub PAT - it will only be updated if a new one is provided
                    
                    // Show the edit modal
                    document.getElementById('editPoolModal').classList.remove('hidden');
                } catch (error) {
                    console.error('Error fetching pool details:', error);
                    alert('Failed to load pool details. Please try again.');
                }
            }

            function closeEditPoolModal() {
                document.getElementById('editPoolModal').classList.add('hidden');
                document.getElementById('editPoolForm').reset();
            }

            // Update setupPoolManagement to include edit form handler
            function setupPoolManagement() {
                const createPoolForm = document.getElementById('createPoolForm');
                const editPoolForm = document.getElementById('editPoolForm');
                
                createPoolForm.addEventListener('submit', handleCreatePool);
                editPoolForm.addEventListener('submit', handleEditPool);
                
                loadPools();
            }

            async function handleEditPool(e) {
                e.preventDefault();
                
                const originalName = document.getElementById('editPoolOriginalName').value;
                const minVMs = parseInt(document.getElementById('editMinimumVMs').value, 10);
                if (isNaN(minVMs) || minVMs < 1) {
                    alert('Minimum VMs must be a positive number');
                    return;
                }
                
                const poolData = {
                    name: document.getElementById('editPoolName').value.trim(),
                    minimum_vms: minVMs,
                    repo_name: document.getElementById('editRepoName').value.trim(),
                    branch_name: document.getElementById('editBranchName').value.trim() || null
                };

                // Only include github_pat if a new one is provided
                const newPat = document.getElementById('editPoolGithubPat').value.trim();
                if (newPat) {
                    poolData.github_pat = newPat;
                }

                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools/${originalName}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(poolData)
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        alert('Pool updated successfully');
                        closeEditPoolModal();
                        loadPools();
                    } else {
                        alert(`Error: ${data.error || 'Failed to update pool'}`);
                    }
                } catch (error) {
                    console.error('Error updating pool:', error);
                    if (error.message !== 'Authentication required') {
                        alert('Failed to update pool. Please try again later.');
                    }
                }
            }

            // VM Management Functions
            async function getAvailableVMs(poolName) {
                try {
                    const response = await authenticatedFetch(`${API_BASE_URL}/pools/${poolName}/available`);
                    const data = await response.json();
                    return data.workspaces || [];
                } catch (error) {
                    console.error('Error getting available VMs:', error);
                    return [];
                }
            }

            async function markVMAsUsed(poolName, workspaceId) {
                try {
                    // Disable the button and show loading state
                    const button = document.querySelector(`button[onclick="markVMAsUsed('${poolName}', '${workspaceId}')"]`);
                    if (button) {
                        button.disabled = true;
                        button.innerHTML = `
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Marking as used...
                        `;
                    }

                    const response = await authenticatedFetch(
                        `${API_BASE_URL}/pools/${poolName}/workspaces/${workspaceId}/use`,
                        {
                            method: 'POST'
                        }
                    );
                    const data = await response.json();
                    if (response.ok) {
                        // Update button to show success state temporarily
                        if (button) {
                            button.className = 'bg-green-500 text-white px-3 py-1 rounded-md text-sm transition duration-200';
                            button.innerHTML = `
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                VM In Use
                            `;
                        }
                        // Refresh the VM list view
                        await usePoolVMs(poolName);
                        // Also refresh the main pools view
                        await loadPools();
                        return true;
                    } else {
                        alert(`Error: ${data.error || 'Failed to mark VM as used'}`);
                        return false;
                    }
                } catch (error) {
                    console.error('Error marking VM as used:', error);
                    alert('Failed to mark VM as used. Please try again.');
                    return false;
                }
            }

            async function releaseVM(poolName, workspaceId) {
                try {
                    // Disable the button and show loading state
                    const button = document.querySelector(`button[onclick="releaseVM('${poolName}', '${workspaceId}')"]`);
                    if (button) {
                        button.disabled = true;
                        button.className = 'bg-gray-400 text-white px-3 py-1 rounded-md text-sm transition duration-200';
                        button.innerHTML = `
                            <svg class="animate-spin -ml-1 mr-2 h-4 w-4 inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Releasing...
                        `;
                    }

                    const response = await authenticatedFetch(
                        `${API_BASE_URL}/pools/${poolName}/workspaces/${workspaceId}/release`,
                        {
                            method: 'POST'
                        }
                    );
                    const data = await response.json();
                    if (response.ok) {
                        // Update button to show success state temporarily
                        if (button) {
                            button.className = 'bg-blue-500 text-white px-3 py-1 rounded-md text-sm transition duration-200';
                            button.innerHTML = `
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                Released
                            `;
                        }
                        // Refresh the VM list view
                        await usePoolVMs(poolName);
                        // Also refresh the main pools view
                        await loadPools();
                        return true;
                    } else {
                        alert(`Error: ${data.error || 'Failed to release VM'}`);
                        return false;
                    }
                } catch (error) {
                    console.error('Error releasing VM:', error);
                    alert('Failed to release VM. Please try again.');
                    return false;
                }
            }
        </script>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workspace-ui
  namespace: workspace-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: workspace-ui
  template:
    metadata:
      labels:
        app: workspace-ui
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: workspace-ui
---
apiVersion: v1
kind: Service
metadata:
  name: workspace-ui
  namespace: workspace-system
spec:
  selector:
    app: workspace-ui
  ports:
  - port: 80
    targetPort: 80
