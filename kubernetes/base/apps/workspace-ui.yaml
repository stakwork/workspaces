apiVersion: v1
kind: ConfigMap
metadata:
  name: workspace-ui
  namespace: workspace-system
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Workspace Manager</title>
        <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    </head>
    <body class="bg-gray-100 font-sans">
        <div class="container mx-auto p-4">
            <h1 class="text-3xl font-bold mb-6">Workspace Manager</h1>
            
            <!-- Create Workspace Form -->
            <div class="bg-white p-6 rounded-lg shadow-md mb-8">
                <h2 class="text-xl font-semibold mb-4">Create New Workspace</h2>
                <form id="createWorkspaceForm">
                    <!-- Repository Inputs -->
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-3">Repositories</h3>
                        <div id="repoInputs" class="space-y-3 mb-4">
                            <div class="repo-input flex items-start">
                                <div class="w-full">
                                    <label for="githubUrl0" class="block text-gray-700 mb-2">GitHub Repository URL</label>
                                    <input type="text" id="githubUrl0" 
                                        placeholder="https://github.com/username/repository" 
                                        class="w-full p-2 border border-gray-300 rounded-md">
                                </div>
                            </div>
                        </div>
                        <div class="flex space-x-2 mb-4">
                            <button type="button" id="addRepoBtn" class="bg-gray-200 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-300">
                                + Add Repository
                            </button>
                        </div>
                    </div>
                    
                    <!-- GitHub PAT Input -->
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-3">GitHub Access Token (Optional)</h3>
                        <input type="password" id="githubPat" 
                            placeholder="Personal Access Token for private repos" 
                            class="w-full p-2 border border-gray-300 rounded-md">
                        <p class="text-xs text-gray-500 mt-1">
                            If you want to clone private repositories, enter a GitHub Personal Access Token (PAT) here.<br>
                            <span class="text-red-500">Do not reuse tokens you use elsewhere. Create a new token with only <b>repo</b> access.</span>
                        </p>
                    </div>
                    
                    <!-- Custom Image Settings -->
                    <div class="mb-6">
                        <h3 class="text-lg font-medium mb-3">Image Configuration</h3>
                        
                        <div class="mb-4">
                            <label class="inline-flex items-center">
                                <input type="radio" name="imageConfigType" value="default" checked class="form-radio">
                                <span class="ml-2">Use Default Image (linuxserver/code-server:latest)</span>
                            </label>
                        </div>
                        
                        <div class="mb-4">
                            <label class="inline-flex items-center">
                                <input type="radio" name="imageConfigType" value="custom" class="form-radio">
                                <span class="ml-2">Use Custom Image</span>
                            </label>
                            
                            <div id="customImageOptions" class="mt-3 ml-6 hidden">
                                <div class="mb-3">
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="customImageType" value="dockerImage" checked class="form-radio">
                                        <span class="ml-2">Specify Docker Image</span>
                                    </label>
                                    <div class="mt-2">
                                        <input type="text" id="customImageName" 
                                            placeholder="e.g., myorg/code-server:v2" 
                                            class="w-full p-2 border border-gray-300 rounded-md">
                                        <p class="text-xs text-gray-500 mt-1">Must be compatible with linuxserver/code-server base image</p>
                                    </div>
                                </div>
                                
                                <div>
                                    <label class="inline-flex items-center">
                                        <input type="radio" name="customImageType" value="imageUrl" class="form-radio">
                                        <span class="ml-2">Build from URL</span>
                                    </label>
                                    <div class="mt-2">
                                        <input type="text" id="customImageUrl" 
                                            placeholder="https://github.com/myorg/my-custom-image" 
                                            class="w-full p-2 border border-gray-300 rounded-md" disabled>
                                        <p class="text-xs text-gray-500 mt-1">URL to GitHub repository or ZIP file containing Dockerfile</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <button type="submit" class="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600">
                        Create Workspace
                    </button>
                </form>
                <div id="createStatus" class="mt-4 hidden"></div>
            </div>
            
            <!-- Workspaces List -->
            <div class="bg-white p-6 rounded-lg shadow-md">
                <h2 class="text-xl font-semibold mb-4">Your Workspaces</h2>
                <div id="workspacesList" class="space-y-4">
                    <p class="text-gray-500">Loading workspaces...</p>
                </div>
            </div>
        </div>
        
        <script>
            const API_BASE_URL = '/api';
            let repoCounter = 1;
            
            // Load workspaces on page load
            document.addEventListener('DOMContentLoaded', function() {
                loadWorkspaces();
                setupFormListeners();
            });
            
            // Setup form listeners
            function setupFormListeners() {
                // Add repository button
                document.getElementById('addRepoBtn').addEventListener('click', addRepositoryInput);
                
                // Image config type radio buttons
                const imageConfigRadios = document.querySelectorAll('input[name="imageConfigType"]');
                imageConfigRadios.forEach(radio => {
                    radio.addEventListener('change', toggleCustomImageOptions);
                });
                
                // Custom image type radio buttons
                const customImageTypeRadios = document.querySelectorAll('input[name="customImageType"]');
                customImageTypeRadios.forEach(radio => {
                    radio.addEventListener('change', toggleCustomImageInputs);
                });
                
                // Form submission
                document.getElementById('createWorkspaceForm').addEventListener('submit', function(e) {
                    e.preventDefault();
                    createWorkspace();
                });
            }
            
            // Add a new repository input
            function addRepositoryInput() {
                const repoInputs = document.getElementById('repoInputs');
                const newInput = document.createElement('div');
                newInput.className = 'repo-input flex items-start';
                newInput.innerHTML = `
                    <div class="w-full mr-2">
                        <label for="githubUrl${repoCounter}" class="block text-gray-700 mb-2">Additional Repository URL</label>
                        <input type="text" id="githubUrl${repoCounter}" 
                            placeholder="https://github.com/username/repository" 
                            class="w-full p-2 border border-gray-300 rounded-md">
                    </div>
                    <button type="button" class="remove-repo-btn bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-600 mt-8">
                        Remove
                    </button>
                `;
                repoInputs.appendChild(newInput);
                
                // Add event listener to remove button
                newInput.querySelector('.remove-repo-btn').addEventListener('click', function() {
                    repoInputs.removeChild(newInput);
                });
                
                repoCounter++;
            }
            
            // Toggle custom image options visibility
            function toggleCustomImageOptions() {
                const customImageOptions = document.getElementById('customImageOptions');
                if (document.querySelector('input[name="imageConfigType"]:checked').value === 'custom') {
                    customImageOptions.classList.remove('hidden');
                } else {
                    customImageOptions.classList.add('hidden');
                }
            }
            
            // Toggle between Docker image name and URL inputs
            function toggleCustomImageInputs() {
                const imageNameInput = document.getElementById('customImageName');
                const imageUrlInput = document.getElementById('customImageUrl');
                
                if (document.querySelector('input[name="customImageType"]:checked').value === 'dockerImage') {
                    imageNameInput.disabled = false;
                    imageUrlInput.disabled = true;
                } else {
                    imageNameInput.disabled = true;
                    imageUrlInput.disabled = false;
                }
            }
            
            // Function to load workspaces
            async function loadWorkspaces() {
                try {
                    const response = await fetch(`${API_BASE_URL}/workspaces`);
                    const data = await response.json();
                    
                    const workspacesList = document.getElementById('workspacesList');
                    
                    if (data.workspaces && data.workspaces.length > 0) {
                        workspacesList.innerHTML = '';
                        
                        data.workspaces.forEach(workspace => {
                            const workspaceEl = document.createElement('div');
                            workspaceEl.className = 'border border-gray-200 rounded-md p-4';
                            
                            const repoName = workspace.repoName || (workspace.repositories?.[0] || workspace.repository).split('/').pop().replace('.git', '');
                            const stateBadge = getStateBadge(workspace.state || 'unknown');

                            // Create repository list HTML
                            let repoListHtml = '';
                            if (workspace.repositories && workspace.repositories.length > 0) {
                                repoListHtml = `
                                    <div class="mt-2 border-t pt-2">
                                        <p class="text-sm font-medium text-gray-700">Repositories:</p>
                                        <ul class="text-sm text-gray-600 list-disc pl-5">
                                `;
                                
                                workspace.repositories.forEach(repo => {
                                    const repoShortName = repo.split('/').pop().replace('.git', '');
                                    repoListHtml += `<li>${repoShortName} <span class="text-xs text-gray-500">(${repo})</span></li>`;
                                });
                                
                                repoListHtml += `
                                        </ul>
                                    </div>
                                `;
                            } else if (workspace.repository) {
                                // For backward compatibility with old workspaces
                                repoListHtml = `
                                    <div class="mt-2">
                                        <p class="text-sm text-gray-600">${workspace.repository}</p>
                                    </div>
                                `;
                            }
                            
                            // Add image info
                            let imageInfoHtml = '';
                            if (workspace.image) {
                                imageInfoHtml = `<p class="text-xs text-gray-500 mt-1">Image: ${workspace.image}</p>`;
                            } else if (workspace.imageUrl) {
                                imageInfoHtml = `<p class="text-xs text-gray-500 mt-1">Custom Image: Built from ${workspace.imageUrl}</p>`;
                            }
                            
                            workspaceEl.innerHTML = `
                                <div class="flex justify-between items-start">
                                    <div>
                                        <div class="flex items-center">
                                            <h3 class="font-semibold text-lg">${repoName}</h3>
                                            <span class="ml-2">${stateBadge}</span>
                                        </div>
                                        ${repoListHtml}
                                        <p class="mt-1 text-xs text-gray-500">ID: ${workspace.id}</p>
                                        <p class="mt-1 text-xs text-gray-500">Subdomain: ${workspace.fqdn}</p>
                                        ${imageInfoHtml}
                                        <p class="mt-2">
                                            <a href="${workspace.url}" target="_blank" class="text-blue-500 hover:underline">
                                                Open Workspace
                                            </a>
                                        </p>
                                    </div>
                                    <div class="space-x-2">
                                        <button onclick="startWorkspace('${workspace.id}')" 
                                            class="bg-green-500 text-white py-1 px-3 rounded-md text-sm"
                                            ${workspace.state === 'running' ? 'disabled' : ''}>
                                            Start
                                        </button>
                                        <button onclick="stopWorkspace('${workspace.id}')"
                                            class="bg-yellow-500 text-white py-1 px-3 rounded-md text-sm"
                                            ${workspace.state !== 'running' ? 'disabled' : ''}>
                                            Stop
                                        </button>
                                        <button onclick="deleteWorkspace('${workspace.id}')" class="bg-red-500 text-white py-1 px-3 rounded-md text-sm">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                                <div class="mt-2 text-sm">
                                    <span class="text-gray-600">Created: ${new Date(workspace.created).toLocaleString()}</span>
                                </div>
                            `;
                            
                            workspacesList.appendChild(workspaceEl);
                        });
                    } else {
                        workspacesList.innerHTML = '<p class="text-gray-500">No workspaces found. Create one to get started.</p>';
                    }
                } catch (error) {
                    console.error('Error loading workspaces:', error);
                    document.getElementById('workspacesList').innerHTML = 
                        '<p class="text-red-500">Failed to load workspaces. Please try again later.</p>';
                }
            }
            
            // Function to create a workspace
            async function createWorkspace() {
                // Get all repository inputs
                const repoInputs = document.querySelectorAll('#repoInputs input[type="text"]');

                console.log("repoInputs", repoInputs)

                const githubUrls = Array.from(repoInputs)
                    .map(input => input.value.trim())
                    .filter(url => url !== '');
                
                if (githubUrls.length === 0) {
                    alert('Please enter at least one GitHub repository URL');
                    return;
                }

                // Get optional GitHub PAT
                const githubPat = document.getElementById('githubPat').value.trim();
                
                let requestData = {
                    githubUrls: githubUrls
                };

                // Add PAT if provided
                if (githubPat) {
                    requestData.githubToken = githubPat;
                }
                
                // Get image configuration
                const imageConfigType = document.querySelector('input[name="imageConfigType"]:checked').value;
                
                if (imageConfigType === 'custom') {
                    const customImageType = document.querySelector('input[name="customImageType"]:checked').value;
                    
                    if (customImageType === 'dockerImage') {
                        const customImage = document.getElementById('customImageName').value.trim();
                        if (customImage) {
                            requestData.image = customImage;
                        }
                    } else {
                        const imageUrl = document.getElementById('customImageUrl').value.trim();
                        if (imageUrl) {
                            requestData.imageUrl = imageUrl;
                        }
                    }
                }
                
                const statusEl = document.getElementById('createStatus');
                statusEl.className = 'mt-4 p-4 bg-yellow-100 text-yellow-800 rounded-md';
                statusEl.innerHTML = 'Creating workspace... This may take a few minutes.';
                statusEl.classList.remove('hidden');
                
                try {
                    const response = await fetch(`${API_BASE_URL}/workspaces`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    const data = await response.json();
                    
                    if (response.ok) {
                        if (data.success) {
                            statusEl.className = 'mt-4 p-4 bg-green-100 text-green-800 rounded-md';
                            
                            const workspace = data.workspace;
                            
                            // Create repository list HTML for the status message
                            let repoListHtml = '';
                            if (workspace.repositories && workspace.repositories.length > 0) {
                                repoListHtml = `
                                    <div class="mt-2">
                                        <p class="font-medium">Repositories:</p>
                                        <ul class="list-disc pl-5">
                                `;
                                
                                workspace.repositories.forEach(repo => {
                                    // Remove trailing slashes and get the last segment
                                    const lastSegment = repo.replace(/\/+$/, '').split('/').pop() || '';
                                    
                                    // Remove .git extension and any leading slash
                                    const repoShortName = lastSegment.replace('.git', '').replace(/^\/+/, '');
                                    
                                    // Fallback if the name is empty after processing
                                    const displayName = repoShortName || 'repository';
                                    
                                    repoListHtml += `<li>${displayName}</li>`;
                                });
                                
                                repoListHtml += `
                                        </ul>
                                    </div>
                                `;
                            }
                            
                            // Add image info
                            let imageInfoHtml = '';
                            if (workspace.image) {
                                imageInfoHtml = `<p class="text-sm">Image: ${workspace.image}</p>`;
                            } else if (workspace.imageUrl) {
                                imageInfoHtml = `<p class="text-sm">Custom Image: Building from ${workspace.imageUrl}</p>`;
                            }
                            
                            statusEl.innerHTML = `
                                <p class="font-semibold">Workspace creation initiated!</p>
                                ${repoListHtml}
                                ${imageInfoHtml}
                                <p class="mt-2">
                                    <a href="${workspace.url}" target="_blank" class="text-blue-600 hover:underline">Open Workspace</a>
                                </p>
                                <p class="text-xs text-gray-500">Subdomain: ${workspace.fqdn}</p>
                                <p class="mt-1">Password: <code class="bg-gray-100 px-2 py-1 rounded">${workspace.password}</code></p>
                                <p class="text-xs mt-2">Please note: It may take a few minutes for the workspace to be fully ready.</p>
                                <p class="text-xs mt-1">If you're building a custom image, it may take even longer for the first startup.</p>
                            `;
                            
                            // Reset the form
                            document.getElementById('createWorkspaceForm').reset();
                            document.getElementById('repoInputs').innerHTML = `
                                <div class="repo-input flex items-start">
                                    <div class="w-full">
                                        <label for="githubUrl0" class="block text-gray-700 mb-2">GitHub Repository URL</label>
                                        <input type="text" id="githubUrl0" 
                                            placeholder="https://github.com/username/repository" 
                                            class="w-full p-2 border border-gray-300 rounded-md">
                                    </div>
                                </div>
                            `;
                            repoCounter = 1;
                            toggleCustomImageOptions();
                            
                            // Reload the workspaces list
                            loadWorkspaces();
                        } else {
                            statusEl.className = 'mt-4 p-4 bg-blue-100 text-blue-800 rounded-md';
                            statusEl.innerHTML = `<p>${data.message}</p>`;
                            loadWorkspaces();
                        }
                    } else {
                        statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                        statusEl.innerHTML = `<p>Error: ${data.error || 'Something went wrong'}</p>`;
                    }
                } catch (error) {
                    console.error('Error creating workspace:', error);
                    statusEl.className = 'mt-4 p-4 bg-red-100 text-red-800 rounded-md';
                    statusEl.innerHTML = '<p>Failed to create workspace. Please try again later.</p>';
                }
            }
            
            // Function to start a workspace
            async function startWorkspace(id) {
                if (!confirm('Start this workspace?')) return;
                
                try {
                    const response = await fetch(`${API_BASE_URL}/workspaces/${id}/start`, {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message || 'Workspace starting');
                        loadWorkspaces();
                    } else {
                        const data = await response.json();
                        alert(`Error: ${data.error || 'Failed to start workspace'}`);
                    }
                } catch (error) {
                    console.error('Error starting workspace:', error);
                    alert('Failed to start workspace. Please try again later.');
                }
            }
            
            // Function to stop a workspace
            async function stopWorkspace(id) {
                if (!confirm('Stop this workspace?')) return;
                
                try {
                    const response = await fetch(`${API_BASE_URL}/workspaces/${id}/stop`, {
                        method: 'POST'
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message || 'Workspace stopping');
                        loadWorkspaces();
                    } else {
                        const data = await response.json();
                        alert(`Error: ${data.error || 'Failed to stop workspace'}`);
                    }
                } catch (error) {
                    console.error('Error stopping workspace:', error);
                    alert('Failed to stop workspace. Please try again later.');
                }
            }
            
            // Function to delete a workspace
            async function deleteWorkspace(id) {
                if (!confirm('Are you sure you want to delete this workspace? This action cannot be undone.')) {
                    return;
                }
                
                try {
                    const response = await fetch(`${API_BASE_URL}/workspaces/${id}/delete`, {
                        method: 'DELETE'
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        alert(data.message || 'Workspace deleted');
                        loadWorkspaces();
                    } else {
                        const data = await response.json();
                        alert(`Error: ${data.error || 'Failed to delete workspace'}`);
                    }
                } catch (error) {
                    console.error('Error deleting workspace:', error);
                    alert('Failed to delete workspace. Please try again later.');
                }
            }
            
            // Helper function to get a state badge
            function getStateBadge(state) {
                const stateColors = {
                    'running': 'bg-green-100 text-green-800',
                    'pending': 'bg-yellow-100 text-yellow-800',
                    'terminating': 'bg-orange-100 text-orange-800',
                    'failed': 'bg-red-100 text-red-800',
                    'unknown': 'bg-gray-100 text-gray-800'
                };
                
                const color = stateColors[state] || stateColors.unknown;
                return `<span class="text-xs px-2 py-1 rounded-full ${color}">${state}</span>`;
            }
        </script>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: workspace-ui
  namespace: workspace-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: workspace-ui
  template:
    metadata:
      labels:
        app: workspace-ui
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: workspace-ui
---
apiVersion: v1
kind: Service
metadata:
  name: workspace-ui
  namespace: workspace-system
spec:
  selector:
    app: workspace-ui
  ports:
  - port: 80
    targetPort: 80
